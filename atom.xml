<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tensory&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tensory.online/"/>
  <updated>2020-01-14T09:17:44.503Z</updated>
  <id>http://www.tensory.online/</id>
  
  <author>
    <name>tensory</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>子模函数和贪心算法(submodular function and greedy algorithm)</title>
    <link href="http://www.tensory.online/2020/01/08/submodular_greedy/"/>
    <id>http://www.tensory.online/2020/01/08/submodular_greedy/</id>
    <published>2020-01-08T10:46:36.003Z</published>
    <updated>2020-01-14T09:17:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>子模函数<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><iframe src="https://github.com/poptensory/OnlineResource/blob/master/submodular_greedy.pdf" width="100%" height="1000px"></iframe></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;子模函数
    
    </summary>
    
      <category term="科研" scheme="http://www.tensory.online/categories/%E7%A7%91%E7%A0%94/"/>
    
    
      <category term="社交网络" scheme="http://www.tensory.online/tags/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    
      <category term="贪心法" scheme="http://www.tensory.online/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"/>
    
      <category term="影响力" scheme="http://www.tensory.online/tags/%E5%BD%B1%E5%93%8D%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>《善恶图》剧情剖析</title>
    <link href="http://www.tensory.online/2019/12/04/%E5%96%84%E6%81%B6%E5%9B%BE/"/>
    <id>http://www.tensory.online/2019/12/04/善恶图/</id>
    <published>2019-12-04T08:42:29.551Z</published>
    <updated>2020-01-14T09:10:12.072Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>《善恶图》是这个故事的学名，小名又叫《顺天府三案连环二十二条人命》。<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>一张人物关系图。</the></p><p><img src="https://raw.githubusercontent.com/poptensory/MarkdownPictures/master/shanetu.jpg" alt="人物关系" title="Optional title"></p><p>天为罗盖地为毯，日月星辰伴我眠。</p><p>什么人撒下名利网，富贵贫困不一般。</p><p>也有骑马与坐轿，也有推车把担儿担。</p><p>骑马坐轿修来的福，推车担担儿命该然。</p><p>骏马驮着痴呆汉，美妇人常伴拙夫眠。</p><p>八十老翁门前站，三岁顽童染黄泉。</p><p>不是老天不睁眼，善恶到头，这报应循环。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;《善恶图》是这个故事的学名，小名又叫《顺天府三案连环二十二条人命》。
    
    </summary>
    
      <category term="相声" scheme="http://www.tensory.online/categories/%E7%9B%B8%E5%A3%B0/"/>
    
    
      <category term="相声" scheme="http://www.tensory.online/tags/%E7%9B%B8%E5%A3%B0/"/>
    
      <category term="郭德纲" scheme="http://www.tensory.online/tags/%E9%83%AD%E5%BE%B7%E7%BA%B2/"/>
    
      <category term="单口相声" scheme="http://www.tensory.online/tags/%E5%8D%95%E5%8F%A3%E7%9B%B8%E5%A3%B0/"/>
    
  </entry>
  
  <entry>
    <title>PyGame</title>
    <link href="http://www.tensory.online/2019/07/02/dull_pygame/"/>
    <id>http://www.tensory.online/2019/07/02/dull_pygame/</id>
    <published>2019-07-02T11:26:47.879Z</published>
    <updated>2019-07-02T11:39:29.351Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>PyGame实现挡板弹球<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>下午用pygame做了一个挡板弹球小游戏，挺好玩的，效果如下。</p><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/2019-07-02_19-17-37.gif" alt="图的说明" title="可选标题"></p><h5 id="pygame的安装"><a href="#pygame的安装" class="headerlink" title="pygame的安装"></a>pygame的安装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">pip install pygame</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="comment"># 下载whl文件：https://pypi.org/project/pygame/1.9.4/#files</span></span><br><span class="line"><span class="comment"># 然后手动安装</span></span><br><span class="line">pip install *.whl</span><br></pre></td></tr></table></figure><h5 id="少废话，看代码"><a href="#少废话，看代码" class="headerlink" title="少废话，看代码"></a>少废话，看代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择难度</span></span><br><span class="line">root = Tk(<span class="string">'11'</span>)</span><br><span class="line">v = IntVar()</span><br><span class="line">Radiobutton(root, text=<span class="string">'简单'</span>, variable=v, value=<span class="number">1</span>, ).pack(anchor=W)</span><br><span class="line">Radiobutton(root, text=<span class="string">'中等'</span>, variable=v, value=<span class="number">2</span>, ).pack(anchor=W)</span><br><span class="line">Radiobutton(root, text=<span class="string">'很难'</span>, variable=v, value=<span class="number">3</span>, ).pack(anchor=W)</span><br><span class="line">mainloop()</span><br><span class="line">v = v.get()</span><br><span class="line"><span class="keyword">if</span> v==<span class="number">1</span>:</span><br><span class="line">    speed = [<span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">    size = width, height = <span class="number">640</span>, <span class="number">480</span>  <span class="comment"># 设置窗口大小</span></span><br><span class="line"><span class="keyword">elif</span> v==<span class="number">2</span>:</span><br><span class="line">    speed = [<span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line">    size = width, height = <span class="number">640</span>, <span class="number">480</span>  <span class="comment"># 设置窗口大小</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    speed = [<span class="number">12</span>, <span class="number">12</span>]</span><br><span class="line">    size = width, height = <span class="number">800</span>, <span class="number">600</span>  <span class="comment"># 设置窗口大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示一下要开始游戏了，不然输个措手不及</span></span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line">tkinter.messagebox.showinfo(<span class="string">'提示'</span>,<span class="string">'准备好开始游戏了吗'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始游戏部分</span></span><br><span class="line">pygame.init()  <span class="comment"># 初始化pygame</span></span><br><span class="line">screen = pygame.display.set_mode(size)  <span class="comment"># 显示窗口</span></span><br><span class="line">color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 设置颜色</span></span><br><span class="line">ball = pygame.image.load(<span class="string">'ball.png'</span>)  <span class="comment"># 加载图片</span></span><br><span class="line">ballrect = ball.get_rect()  <span class="comment"># 获取矩形区域</span></span><br><span class="line">ballrect.left = int(random.random()*width)</span><br><span class="line"></span><br><span class="line">clock = pygame.time.Clock()  <span class="comment"># 设置时钟</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挡板设置</span></span><br><span class="line">board = pygame.image.load(<span class="string">'board.png'</span>)</span><br><span class="line">boardrect = board.get_rect()</span><br><span class="line">boardrect.bottom = height<span class="comment"># 设置挡板在底部</span></span><br><span class="line"></span><br><span class="line">scores = <span class="number">0</span><span class="comment"># 分数初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># 死循环确保窗口一直显示</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)  <span class="comment"># 每秒执行60次。动画是静态图片快速移动形成的，这句话是这个意思。</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():  <span class="comment"># 遍历所有事件</span></span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:  <span class="comment"># 如果单击关闭窗口，则退出</span></span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">    ballrect = ballrect.move(speed)  <span class="comment"># 移动小球</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 碰到左右边缘</span></span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 碰到上边缘</span></span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span>:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 碰到下边缘</span></span><br><span class="line">    <span class="keyword">if</span> ballrect.bottom &gt; height:</span><br><span class="line">        <span class="comment"># 如果在挡板区间内部，得1分</span></span><br><span class="line">        <span class="keyword">if</span> ballrect.left &gt; boardrect.left <span class="keyword">and</span> ballrect.right &lt; boardrect.right:</span><br><span class="line">            scores += <span class="number">1</span></span><br><span class="line">            speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 否则 失败</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = str(scores)</span><br><span class="line">            <span class="keyword">if</span> scores == <span class="number">0</span>:</span><br><span class="line">                msg += <span class="string">' 运气也是实力的一部分哦'</span></span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'得分'</span>, msg)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据方向键 移动挡板</span></span><br><span class="line">    <span class="keyword">if</span> event.type == pygame.KEYDOWN:</span><br><span class="line">        speed2 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> event.key == <span class="number">276</span>:    <span class="comment"># 左方向键</span></span><br><span class="line">            speed2 = [<span class="number">-8</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> event.key == <span class="number">275</span>:  <span class="comment"># 右方向键</span></span><br><span class="line">            speed2 = [<span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line">        boardrect = boardrect.move(speed2)  <span class="comment"># 移动挡板</span></span><br><span class="line"></span><br><span class="line">    screen.fill(color)</span><br><span class="line">    screen.blit(board, boardrect)</span><br><span class="line">    screen.blit(ball, ballrect)</span><br><span class="line">    pygame.display.flip()  <span class="comment"># 更新全部显示</span></span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ol><li><a href="https://www.pygame.org/wiki/GettingStarted" target="_blank" rel="noopener">https://www.pygame.org/wiki/GettingStarted</a> </li><li><a href="https://blog.csdn.net/zha6476003/article/details/82940350" target="_blank" rel="noopener">https://blog.csdn.net/zha6476003/article/details/82940350</a> </li></ol><p>看懂了吧，程序员的生活就是这么的朴实无华，且枯燥。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;PyGame实现挡板弹球
    
    </summary>
    
      <category term="Python" scheme="http://www.tensory.online/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.tensory.online/tags/Python/"/>
    
      <category term="游戏" scheme="http://www.tensory.online/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux的硬链接与软链接</title>
    <link href="http://www.tensory.online/2019/02/19/linux_ls/"/>
    <id>http://www.tensory.online/2019/02/19/linux_ls/</id>
    <published>2019-02-19T13:16:40.653Z</published>
    <updated>2019-07-02T11:51:43.406Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>介绍Linux的硬链接和软链接<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="Linux的inode"><a href="#Linux的inode" class="headerlink" title="Linux的inode"></a>Linux的inode</h1><p>我们在使用<code>ls -al -i</code>命令查看目录的文件和目录，如下图</p><p>每行的第一列数据，就是对应的inode。数据在磁盘上以块(block)存储，系统读取文件的过程为：通过文件名找到inode，进而找到inode的信息，即数据所在的块，最后读取数据。<br>因此inode可以简单理解为：数据在磁盘上的位置索引。inode大小一般为128字节或256字节，7或8位。</p><h1 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h1><p>二者的概念如下图所示：</p><p>可以看到，硬链接是直接指向了文件所在块，软链接指向了已存在的一个文件名。类似于Java中的引用。</p><p>硬链接的文件类型可以是很多文件的类型，而软链接的文件类型就只是[软链接]这种类型，类型代号为[字母l]。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;介绍Linux的硬链接和软链接
    
    </summary>
    
      <category term="Linux" scheme="http://www.tensory.online/categories/Linux/"/>
    
    
      <category term="inode" scheme="http://www.tensory.online/tags/inode/"/>
    
      <category term="硬链接" scheme="http://www.tensory.online/tags/%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    
      <category term="软链接" scheme="http://www.tensory.online/tags/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx那些事儿</title>
    <link href="http://www.tensory.online/2019/02/17/nginx_server/"/>
    <id>http://www.tensory.online/2019/02/17/nginx_server/</id>
    <published>2019-02-17T10:57:51.839Z</published>
    <updated>2019-02-17T12:41:44.748Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文介绍Nginx的功能<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>最近需要将一个前端项目部署到服务器，后台部署在另一台服务器。查阅相关资料后，了解到需要一个http服务器，Apache、Nginx甚至python自带http服务器都可以实现。<br>但是最常用的是Nginx，并且Nginx除了http服务器功能之后，还可以实现负载均衡、反向代理、正向代理的功能，因此毫不犹豫地选择Nginx。</p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><p>Ubuntu上Nginx的安装非常简单，代码如下。其他Linux系统貌似复杂一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 更新apt-get</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装nginx</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"></span><br><span class="line"># 查看nginx</span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure></p><p>查看nginx的结果如下图<br><img src="https://raw.githubusercontent.com/poptensory/MarkdownPictures/master/nginx_server.png" alt="whereis nginx"><br>其中<code>/etc/nginx</code>包含最重要的配置文件。</p><h1 id="静态资源部署-http服务器"><a href="#静态资源部署-http服务器" class="headerlink" title="静态资源部署(http服务器)"></a>静态资源部署(http服务器)</h1><p>静态资源，例如文本、图片、html页面等。部署在服务器，就可以通过[服务器IP+端口号]的方式访问这些资源了。需要做的有4步。</p><ol><li>上传静态资源到服务器<br>例如，我们将web文档(HTML+JS)上传到主目录下的一个目录，上传之后的文件结构和内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/tensory/MyWeb/web/a.html</span><br><span class="line">/home/tensory/MyWeb/web/b.html</span><br><span class="line">/home/tensory/MyWeb/web/c.html</span><br></pre></td></tr></table></figure></li></ol><p>服务器的IP地址为<code>192.168.1.111</code>。<br>我们希望实现：浏览器地址栏输入<code>192.168.1.111:9990/web/a.html</code>能够看到页面<code>a.html</code>，诸如此类。</p><ol start="2"><li>配置<br>进入/etc/nginx下，找到<code>nginx.conf</code>文件，进行如下配置(相应位置改为自己的)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 设置用户</span><br><span class="line">user tensory tensory;</span><br><span class="line"></span><br><span class="line"># 设置进程数</span><br><span class="line">worker_processes  4;</span><br><span class="line"></span><br><span class="line"># 日志文件的目录，这个目录可能需要自己建立，不然后面无法启动Nginx</span><br><span class="line">error_log  logs/error.log  notice;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"># 重点修改这里</span><br><span class="line">     server &#123;</span><br><span class="line">     </span><br><span class="line">     # IP和端口号设置：IP不能带有http等前缀；可以不设置端口，默认端口80，这样访问的时候地址栏可以不用写端口，默认80。</span><br><span class="line">        server_name 192.168.1.111;</span><br><span class="line">        listen9990;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">        # 改为自己的</span><br><span class="line">            root        /home/tensory/MyWeb;</span><br><span class="line">            </span><br><span class="line">            # 这个index.html为Nginx自带的页面，不用改动</span><br><span class="line">            index       index.html;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>配置文件完成，注意别漏掉或多写{或}。</p><ol start="3"><li>测试、载入配置</li></ol><p>对于配置文件，一定要进行测试，然后再载入Nginx。代码如下(方便起见，可以写成脚本)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试</span><br><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line"># 测试如果提示成功，则载入配置(载入并重启)</span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p><ol start="4"><li>测试访问<br>浏览器输入<code>192.168.1.111:9990/web/a.html</code>就能看到a.html页面，b.html和c.html同样可以看到。</li></ol><h1 id="反向代理-ajax跨域问题"><a href="#反向代理-ajax跨域问题" class="headerlink" title="反向代理(ajax跨域问题)"></a>反向代理(ajax跨域问题)</h1><p>部署完成之后，能看到页面，但是a.html里面的ajax无法获取数据，原因是禁止跨域访问。</p><p>假设a.html文件中包含ajax请求，请求的是API是后台提供的，且后台部署在<code>192.168.1.222</code>服务器上，端口号为<code>8880</code>。假设ajax请求如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax&#123;</span><br><span class="line">url:http://192.168.1.222:8880/api/getMoney,</span><br><span class="line">type:&quot;GET&quot;,</span><br><span class="line">......</span><br><span class="line">success: function(data)&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决办法即反向代理。将ajax请求的url改为：<code>(端口号一定要和静态资源访问端口号相同，都是9990)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax&#123;</span><br><span class="line">url:http://192.168.1.111:9990/api/getMoney,// 注意这个端口号一定要和静态资源访问端口号相同，不然产生新的跨域。</span><br><span class="line">type:&quot;GET&quot;,</span><br><span class="line">......</span><br><span class="line">success: function(data)&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在前面的基础上，修改Nginx的配置文件<code>nginx.conf</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 设置用户</span><br><span class="line">user tensory tensory;</span><br><span class="line"></span><br><span class="line"># 设置进程数</span><br><span class="line">worker_processes  4;</span><br><span class="line"></span><br><span class="line"># 日志文件的目录，这个目录可能需要自己建立，不然后面无法启动Nginx</span><br><span class="line">error_log  logs/error.log  notice;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"># 重点修改这里</span><br><span class="line">     server &#123;</span><br><span class="line">     </span><br><span class="line">     # IP和端口号设置：IP不能带有http等前缀；可以不设置端口，默认端口80，这样访问的时候地址栏可以不用写端口，默认80。</span><br><span class="line">        server_name 192.168.1.111;</span><br><span class="line">        listen9990;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">        # 改为自己的</span><br><span class="line">            root        /home/tensory/MyWeb;</span><br><span class="line">            </span><br><span class="line">            # 这个index.html为Nginx自带的页面，不用改动</span><br><span class="line">            index       index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #####################################</span><br><span class="line">        # 添加下面的location内容#</span><br><span class="line">        #####################################</span><br><span class="line">        </span><br><span class="line">        location /api &#123;</span><br><span class="line">        # 改为后台api所在的服务器的IP+端口</span><br><span class="line">            proxy_passhttp://192.168.1.222:8880;</span><br><span class="line">            </span><br><span class="line">            # cookie设置</span><br><span class="line">        proxy_cookie_domain192.168.1.111192.168.1.222;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试并重新载入配置文件，就可以通过ajax访问到后台数据了。上面这个过程叫做，反向代理。</p><p>通过设置转发路径proxy_pass，将进入<code>http://192.168.1.111:9990</code>的请求转发到proxy_pass的路径，即：<code>http://192.168.1.222:8880</code>，即后端API的路径。</p><h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>反向代理反过来。</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>负载均衡解决高并发请求，做法是将被请求方复制，置于多台服务器，请求的时候按照一定的概率(可以设置)或者轮询的方式访问这些服务器。<br>好处是：</p><ol><li>提高并发量：多台服务器分担压力。</li><li>稳定：如果某台服务器宕掉，会转发到其他服务器。</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文介绍Nginx的功能
    
    </summary>
    
      <category term="Web前端" scheme="http://www.tensory.online/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Nginx" scheme="http://www.tensory.online/tags/Nginx/"/>
    
      <category term="Http服务器" scheme="http://www.tensory.online/tags/Http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="反向代理" scheme="http://www.tensory.online/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>美就是生产力——Latex排版</title>
    <link href="http://www.tensory.online/2019/02/12/latex_model/"/>
    <id>http://www.tensory.online/2019/02/12/latex_model/</id>
    <published>2019-02-12T07:57:43.663Z</published>
    <updated>2019-02-12T08:23:53.795Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文介绍一个简单又好看的Latex模板<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>Latex版本：CTEX_2.9.2.164.exe<br>考虑到一些包的依赖问题，不建议下载最新版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[<span class="number">15</span>pt,a4paper]&#123;article&#125;</span><br><span class="line">\usepackage&#123;CJK&#125;</span><br><span class="line">\usepackage&#123;abstract&#125;</span><br><span class="line">\usepackage&#123;indentfirst&#125;    % 用于每个section的第一段缩进，否则不缩进</span><br><span class="line">\usepackage&#123;geometry&#125;   % 用于下面设置左右上下的页边距</span><br><span class="line">\newgeometry&#123;left=<span class="number">2.5</span>cm, right=<span class="number">2.5</span>cm, top=<span class="number">1</span>cm, bottom=<span class="number">2</span>cm&#125;  % 设置左右上下的页边距</span><br><span class="line"></span><br><span class="line">\usepackage&#123;algorithm, verbatim, algorithmic, graphicx&#125; % 插入图片</span><br><span class="line">\usepackage[tight,footnotesize]&#123;subfigure&#125;  % 子图</span><br><span class="line"></span><br><span class="line">\usepackage&#123;algorithm, verbatim, algorithmic, graphicx, threeparttable, multirow,</span><br><span class="line">cite, amssymb, tabularx, blindtext&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;caption&#125;    % 修改Figure 为 图</span><br><span class="line"></span><br><span class="line">\begin&#123;CJK*&#125;&#123;GBK&#125;&#123;song&#125;</span><br><span class="line"></span><br><span class="line">\captionsetup[figure]&#123;labelfont=&#123;bf&#125;,name=&#123;图&#125;,labelsep=period&#125;  % 修改Figure 为 图，这句应该在CJK后面</span><br><span class="line"></span><br><span class="line">% 定义公式大小</span><br><span class="line">% \newenvironment&#123;sequation&#125;&#123;\begin&#123;equation&#125;\large&#125;&#123;\end&#123;equation&#125;&#125;</span><br><span class="line">\newenvironment&#123;sequation&#125;&#123;\begin&#123;equation&#125;&#125;&#123;\end&#123;equation&#125;&#125;</span><br><span class="line"></span><br><span class="line">\title&#123;一份简单又好看的Latex模板&#125;  % 这是文章的标题</span><br><span class="line"></span><br><span class="line">\author&#123;http://www.tensory.online&#125;  % 作者</span><br><span class="line"></span><br><span class="line">\date&#123;<span class="number">2019</span>/<span class="number">02</span>/<span class="number">12</span>&#125; % 设置日期为空，即不设置。或者不写，自动设置日期。</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\maketitle</span><br><span class="line"></span><br><span class="line">% 插入目录</span><br><span class="line">% \tableofcontents</span><br><span class="line"></span><br><span class="line">% 自定义设置摘要的形式</span><br><span class="line">\renewcommand&#123;\abstractname&#125;&#123;\begin&#123;flushleft&#125;\textbf&#123;\Large&#123;摘\ 要&#125;&#125;\end&#123;flushleft&#125;&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;abstract&#125;</span><br><span class="line">\begin&#123;flushleft&#125;</span><br><span class="line">本文给出一份简单又好看的Latex模板。</span><br><span class="line">\end&#123;flushleft&#125;</span><br><span class="line">\end&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;flushleft&#125;</span><br><span class="line">\textbf&#123;\Large&#123;关键词：&#125;&#125;Latex；排版</span><br><span class="line">\end&#123;flushleft&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;引言&#125;</span><br><span class="line">Latex是非常好用的排版软件。</span><br><span class="line"></span><br><span class="line">\section&#123;量子概率论&#125;</span><br><span class="line"></span><br><span class="line">我们对QP理论和CP理论进行比较，假设这两个理论的样本空间或向量空间均为有限空间\cite&#123;Zheng2013The&#125;\cite&#123;Griffiths2002Consistent&#125;。</span><br><span class="line"></span><br><span class="line">\subsection&#123;QP理论与CP理论&#125;</span><br><span class="line"></span><br><span class="line">CP理论中的条件概率定义如下，如果事件$A$已知，那么$B$发生的概率为</span><br><span class="line">\begin&#123;sequation&#125;</span><br><span class="line">p_A(B)=p(B|A)=\frac&#123;p(A\cap B)&#125;&#123;p(A)&#125;.</span><br><span class="line">\end&#123;sequation&#125;</span><br><span class="line"></span><br><span class="line">\subsection&#123;合取谬论与Linda问题&#125;</span><br><span class="line"></span><br><span class="line">不相容的事件可以用斜角的子空间表示，如图\ref&#123;fig_quantum_cognition&#125;所示。</span><br><span class="line">\begin&#123;figure&#125;[h]</span><br><span class="line">\centering</span><br><span class="line">\includegraphics[width=<span class="number">4</span>cm]&#123;fig_quantum_cognition.png&#125;</span><br><span class="line">\caption&#123;Linda问题的量子概率论解释&#125;</span><br><span class="line">\label&#123;fig_quantum_cognition&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">\addcontentsline&#123;toc&#125;&#123;chapter&#125;&#123;\protect\numberline&#123;&#125;&#123;参考文献&#125;&#125;</span><br><span class="line">%\bibliographystyle&#123;ieeetr&#125;</span><br><span class="line">%\bibliography&#123;enhance-ref&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;结论&#125;</span><br><span class="line">本文简要说明了量子认知的概念。</span><br><span class="line"></span><br><span class="line">%把Latex中的 Reference 写成中文的<span class="string">"参考文献"</span></span><br><span class="line">%%如果文档类是article之类的, 用\renewcommand\refname&#123;参考文献&#125;</span><br><span class="line">%%如果文档类是book之类的, 用\renewcommand\bibname&#123;参考文献&#125;</span><br><span class="line">\renewcommand\refname&#123;参考文献&#125;</span><br><span class="line">\bibliographystyle&#123;unsrt&#125;%设置参考文献的类型 (bibliography style). 标准的为 plain</span><br><span class="line">\bibliography&#123;enhance-ref&#125;%告诉LaTeX生成参考文献列表  enhance-ref.bib 是同目录下的参考文献管理文件</span><br><span class="line">% \bibliographystyle&#123;unsrt&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;CJK*&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>参考文献文件enhance-ref.bib中的内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;Zheng2013The,</span><br><span class="line">  title=&#123;The potential of using quantum theory to build models of cognition&#125;,</span><br><span class="line">  author=&#123;Zheng, Wang and Busemeyer, Jerome R, and Harald, Atmanspacher and Pothos, Emmanuel M,&#125;,</span><br><span class="line">  journal=&#123;Topics in Cognitive Science&#125;,</span><br><span class="line">  volume=&#123;5&#125;,</span><br><span class="line">  number=&#123;4&#125;,</span><br><span class="line">  pages=&#123;672-688&#125;,</span><br><span class="line">  year=&#123;2013&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@book&#123;Griffiths2002Consistent,</span><br><span class="line">  title=&#123;Consistent Quantum Theory&#125;,</span><br><span class="line">  author=&#123;Griffiths, Robert B&#125;,</span><br><span class="line">  year=&#123;2002&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果：<br><img src="https://raw.githubusercontent.com/poptensory/MarkdownPictures/master/show_latex.png" alt="效果还行" title="看看效果"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文介绍一个简单又好看的Latex模板
    
    </summary>
    
      <category term="类别名称" scheme="http://www.tensory.online/categories/%E7%B1%BB%E5%88%AB%E5%90%8D%E7%A7%B0/"/>
    
    
      <category term="Latex" scheme="http://www.tensory.online/tags/Latex/"/>
    
      <category term="模板" scheme="http://www.tensory.online/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>美就是生产力——Python绘图</title>
    <link href="http://www.tensory.online/2019/01/14/beautiful_python_plot/"/>
    <id>http://www.tensory.online/2019/01/14/beautiful_python_plot/</id>
    <published>2019-01-14T01:55:14.533Z</published>
    <updated>2019-02-14T02:25:35.113Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>如何用Python绘制自定义精美图形<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>简陋的图形，就像是这样的。</p><div align="center"><br><img alt="not good" src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/BeautifulPythonPlot/ugly.png" width="800" div="" align="right"><br></div><p>简陋的图形，虽然也能传达图片的含义，但是没有给人愉悦的感觉。精美的图形，是这样的：</p><div align="center"><br><img alt="better" src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/BeautifulPythonPlot/better.png" width="800" div="" align="right"><br></div><p>代码模板如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PlotSettings.py</span></span><br><span class="line"><span class="comment"># 设置模块，可以设置一些字体大小，以及自定义图例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> ft</span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴和y轴的说明文字字体</span></span><br><span class="line">labelsize = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴和y轴的数字刻度字体</span></span><br><span class="line">ticklabelsize = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片容器的位置</span></span><br><span class="line">left = <span class="number">0.15</span></span><br><span class="line">bottom = <span class="number">0.17</span></span><br><span class="line">top = <span class="number">0.93</span></span><br><span class="line">right = <span class="number">0.97</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例字体大小</span></span><br><span class="line">legendsize = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_plot</span><span class="params">(plt,ax)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#get object</span></span><br><span class="line">    xlabel = ax.get_xlabel()</span><br><span class="line">    ylabel = ax.get_ylabel()</span><br><span class="line"></span><br><span class="line">    ax.set_xlabel(xlabel, fontsize=labelsize)</span><br><span class="line">    ax.set_ylabel(ylabel, fontsize=labelsize)</span><br><span class="line"></span><br><span class="line">    plt.xticks(fontsize=ticklabelsize)</span><br><span class="line">    plt.yticks(fontsize=ticklabelsize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调整子图的绝对位置</span></span><br><span class="line">    plt.subplots_adjust(top=top, bottom=bottom, right=right, left=left)</span><br><span class="line"></span><br><span class="line">    handles, labels = ax.get_legend_handles_labels()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 精确设置图例：各个字段的含义丰富</span></span><br><span class="line">    ax.legend(handles,</span><br><span class="line">              labels,</span><br><span class="line">              prop=ft.FontProperties(size=legendsize, weight=<span class="string">'light'</span>),</span><br><span class="line">              loc=<span class="number">0</span>,</span><br><span class="line">              borderaxespad=<span class="number">0.05</span>,</span><br><span class="line">              labelspacing=<span class="number">0.05</span>,</span><br><span class="line">              columnspacing=<span class="number">0.005</span>,</span><br><span class="line">              handletextpad=<span class="number">0.05</span>,</span><br><span class="line">              borderpad=<span class="number">0.1</span>,</span><br><span class="line">              ncol=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># example.py</span></span><br><span class="line"><span class="comment"># Example如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Encoding: utf-8</span></span><br><span class="line"><span class="comment"># @Author  : tensory</span></span><br><span class="line"><span class="comment"># @Time    : 2019/1/14 9:13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> BeautifulPlot <span class="keyword">import</span> PlotSettings</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成测试数据</span></span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    y1 = [e+<span class="number">3</span> <span class="keyword">for</span> e <span class="keyword">in</span> x]</span><br><span class="line">    y2 = [<span class="number">2</span>*e - <span class="number">1</span> <span class="keyword">for</span> e <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个figure对象，背景为 白色，比例为 12:9</span></span><br><span class="line">    fig = plt.figure(facecolor=<span class="string">'white'</span>, figsize=(<span class="number">12</span>, <span class="number">9</span>))</span><br><span class="line">    <span class="comment"># 创建一个子图: 111表示1x1的图的第1个图</span></span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置标题和横纵轴的说明文字。</span></span><br><span class="line">    plt.title(<span class="string">'No title QAQ'</span>, fontsize=<span class="number">30</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Time (days)'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'The network traffic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置横纵轴的范围</span></span><br><span class="line">    plt.ylim([<span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line">    plt.xlim([<span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制每条曲线，并设置legend的内容，marker的样式和大小，线条的样式和宽度。注意：自带Latex公式语法</span></span><br><span class="line">    plt.plot(x, y1, label=<span class="string">'$y_1=x*x-x$'</span>, marker=<span class="string">'s'</span>, markersize=<span class="string">'10'</span>, linestyle=<span class="string">'-'</span>, linewidth=<span class="number">5</span>)</span><br><span class="line">    plt.plot(x, y2, label=<span class="string">'$y_2=x+10$'</span>,marker=<span class="string">'p'</span>, markersize=<span class="string">'10'</span>, linestyle=<span class="string">'-'</span>, linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标轴、坐标轴说明、图lengend的大小等</span></span><br><span class="line">    PlotSettings.set_plot(plt, ax)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    save_path_jpg = <span class="string">'result.jpg'</span></span><br><span class="line">    <span class="comment"># edgecolor设置周围没有空白，不然左边会有多的空白</span></span><br><span class="line">    fig.savefig(save_path_jpg, facecolor=fig.get_facecolor(), edgecolor=<span class="string">'none'</span>)</span><br></pre></td></tr></table></figure><p>更多的设置，可以直接参考matplotlib的turtorials。<br><a href="https://matplotlib.org/tutorials/index.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/index.html</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;如何用Python绘制自定义精美图形
    
    </summary>
    
      <category term="Python" scheme="http://www.tensory.online/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.tensory.online/tags/Python/"/>
    
      <category term="绘图" scheme="http://www.tensory.online/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="matplotlib" scheme="http://www.tensory.online/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Scala编写Spark程序Windows本地调试、打jar包、提交远程集群运行</title>
    <link href="http://www.tensory.online/2018/12/18/run_scala_on_spark/"/>
    <id>http://www.tensory.online/2018/12/18/run_scala_on_spark/</id>
    <published>2018-12-18T14:36:47.660Z</published>
    <updated>2019-01-09T14:13:35.790Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文详述Scala本地debug、打jar包、提交到远程集群运行。<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>编译器：InteliJ IDEA<br>JD版本：1.8<br>Spark版本：2.2.2<br>Hadoop版本：2.7.3<br>Scala版本：2.11.8</p><p>注意：</p><ol><li>IDEA自带Mave,sbt等工程管理工具，非常方便，所以选择IDEA。</li><li>Windows本地调试，需要JDk，Spark，Hadoop，Scala，版本应当与集群版本保持一致。Spark和Hadoop的版本，只要不相差太大就没问题，但是本地和集群的JDK、Scala必须最好对应保持版本一致。</li></ol><h1 id="本地调试纯Scala程序"><a href="#本地调试纯Scala程序" class="headerlink" title="本地调试纯Scala程序"></a>本地调试纯Scala程序</h1><ol><li><p>先下载JDK，Spark，Hadoop的安装包，解压到某个位置。</p></li><li><p>配置环境变量<br>配置JAVA_HOME, SPARK_HOME, HADOOP_HOME<br>在PATH这个变量中，添加JDK,Spark, Hadoop的bin目录对应的目录，如下图所示：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_env_var.png" alt="Env" title="Env"></p></li></ol><p>测试是否配置好环境变量，操作及正确反馈如下图：<br>JDK:<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_java-cmd.png" alt="Java" title="Java"></p><p>Spark:<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_spark-cmd.png" alt="Spark" title="Spark"></p><p>Hadoop:<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_hadoop-cmd.png" alt="Hadoop" title="Hadoop"></p><ol start="3"><li>IDEA中建立Scala项目<br>step1: 建立一个项目<br>Scala&gt;IDEA&gt;Next，建立Scala项目。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_1.png" alt="Scala" title="Scala"><br>step2: 配置<br>特定注意配置好JDK路径，Scala路径和版本问题<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_2.png" alt="Scala" title="Scala"><br>选择Scala源文件(含有bin等目录的Scala文件)。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_3.png" alt="Scala" title="Scala"><br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_4.png" alt="Scala" title="Scala"><br>建立目录，设置Sources源文件目录。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_5.png" alt="Scala" title="Scala"><br>建立一个Scala类。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_6.png" alt="Scala" title="Scala"><br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_7.png" alt="Scala" title="Scala"><br>编写对应代码，并运行。<br>可以看出，可以代码通过。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_8.png" alt="Scala" title="Scala"></li></ol><p>上面的是纯粹的Scala程序，不需要Hadoop或者Spark也可以正常运行。</p><h1 id="本地调试Scala-Spark程序"><a href="#本地调试Scala-Spark程序" class="headerlink" title="本地调试Scala Spark程序"></a>本地调试Scala Spark程序</h1><p>下面我们将代码编写更复杂一点。<br>step1: 导入Spark的jar包<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_9.png" alt="Scala" title="Scala"><br>step2: 选择$SPARK_HOME/jars中的所有包。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_10.png" alt="Scala" title="Scala"><br>Apply &gt; OK<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_11.png" alt="Scala" title="Scala"><br>编写带有SparkContext的Scala程序，创建sc。运行。可以看到，能够正常运行Spark程序了。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_12.png" alt="Scala" title="Scala"></p><h1 id="打包与提交到远程集群"><a href="#打包与提交到远程集群" class="headerlink" title="打包与提交到远程集群"></a>打包与提交到远程集群</h1><ol><li>打包<br>步骤如下：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_13.png" alt="Scala" title="Scala"><br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_14.png" alt="Scala" title="Scala"><br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_15.png" alt="Scala" title="Scala"><br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_16.png" alt="Scala" title="Scala"><br>如下图，可以看到out/artifacts/xxx/目录下，多了一个jar包：Scala2JAR.jar<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_17.png" alt="Scala" title="Scala"><br>2.提交运行<br>得到这个jar包之后，利用WinSCP等工具，将文件上传到集群上。然后输入如下命令运行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-submit --master spark://master_ip:7077 --class &quot;类名&quot; jar包.jar</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_18.png" alt="Scala" title="Scala"><br>出现如上的INFO-Level的日志，不报错，就说明成功运行。</p><h1 id="可能出现的Bug"><a href="#可能出现的Bug" class="headerlink" title="可能出现的Bug"></a>可能出现的Bug</h1><p>如果出现如下错误：最可能的原因是，本地和集群的Spark或Scala版本不一致造成的。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/FigIDEAScala/IDEA_Scala_bug.png" alt="Scala" title="Scala"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>将近一个月没写博客了，以后多挤点时间系统学习一些技能，知其所以然，争取坚持每周至少一篇总结的博客。加油！</p><p>累了可以听听左上角的相声。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文详述Scala本地debug、打jar包、提交到远程集群运行。
    
    </summary>
    
      <category term="大数据" scheme="http://www.tensory.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Scala" scheme="http://www.tensory.online/tags/Scala/"/>
    
      <category term="Spark" scheme="http://www.tensory.online/tags/Spark/"/>
    
      <category term="debug" scheme="http://www.tensory.online/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Hive和Hbase对比</title>
    <link href="http://www.tensory.online/2018/12/05/hive_hbase/"/>
    <id>http://www.tensory.online/2018/12/05/hive_hbase/</id>
    <published>2018-12-05T11:15:18.851Z</published>
    <updated>2018-12-14T03:55:42.972Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>对比Hive和Hbase。<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>Hive和Hbase都是基于Hadoop的HDFS对数据进行管理（我没有说”存储”）。</the></p><p>Hive是对MapReduce的封装，Hbase是对HDFS的封装。</p><h1 id="文件存储的区别"><a href="#文件存储的区别" class="headerlink" title="文件存储的区别"></a>文件存储的区别</h1><p>将本地文本文件导入Hive的时候，该文件会被存在在HDFS，因此可以说Hive是基于HDFS对数据进行存储的。<br>Hive只提供了一套访问HDFS的API，这套API对用户而言类似于SQL，用户输入的HQL被翻译成MR过程对数据进行访问。<br>因此，也可以说Hive没有数据存储功能，既然如此，可以想象，将数据导入Hive的时候，效率是非常高的，因为Hive根本就没有存储数据，只是将数据放在了HDFS上。而已。</p><p>Hbase是真正的数据库，而且区别于SQLServer, MySQL和MongoDB等关系数据库，Hbase是一种key/value数据库（redis??）。<br>想到key/value，就想到了字典，字典的最大特点就是：在已知key的条件下，O(1)时间内访问value。因此Hbase的查询速度很快。<br>将数据导入Hbase，首先要将数据放在HDFS上，再将HDFS上的数据导入Hbase表，是真正的导入，因此在数据导入上，效率比Hive差很多（不过没关系，原因后面解释）。<br>Hbase允许存储非结构化数据，因为key/value存储的方式，在Hbase表中，允许“表中有表”(column family：列簇的概念)，而这违反了关系型数据库的第一范式，所以它不是关系型数据库。</p><p>例如，Hbase存储的结构如下表，其中#表示该行没有这个字段。一个列簇可能有多个列。</p><div style="text-align:center"><table style="margin:auto" border="1">   <tr>      <td rowspan="2">主键</td>      <td colspan="2">列簇1</td>      <td>列簇2</td>      <td colspan="3">列簇3</td>   </tr>   <tr>      <td>列11</td>      <td>列12</td>      <td>列21</td>      <td>列31</td>      <td>列32</td>      <td>列33</td>   </tr>   <tr>      <td>1</td>      <td>#</td>      <td>1</td>      <td>#</td>      <td>3</td>      <td>#</td>      <td>#</td>   </tr>   <tr>      <td>2</td>      <td>#</td>      <td>#</td>      <td>2</td>      <td>#</td>      <td>#</td>      <td>#</td>   </tr>   <tr>      <td>3</td>      <td>32</td>      <td>#</td>      <td>#</td>      <td>3</td>      <td>#</td>      <td>#</td>   </tr>   <tr>      <td>4</td>      <td>#</td>      <td>9</td>      <td>4</td>      <td>#</td>      <td>3</td>      <td>7</td>   </tr></table></div><h1 id="实用场景及原因分析"><a href="#实用场景及原因分析" class="headerlink" title="实用场景及原因分析"></a>实用场景及原因分析</h1><p>Hive适合大规模离线数据的批量分析。<br>首先，大规模数据采用Hive无可厚非，因为Hive基于分布式存储系统。<br>其次，为什么是离线数据？因为Hive不提供数据更新的接口，所以在线实时数据基本上不能用Hive来管理，Hive是数据仓库。<br>又为什么是批量分析？批量分析指的是，例如分组查询统计，根据某个字段条件查询等，这个关系型数据可以做到，但是Hive是分布式，因此肯定比传统的单机数据库效率高。</p><p>Hbase适合在线实时数据存储。<br>Hbase提供了数据更新接口。废话，不能更新数据好意思叫数据库？人家那叫数据仓库。因此Hbase适合用于实时在线数据存储，且数据的访问是根据key来访问的，效率非常高。</p><h1 id="实验对比"><a href="#实验对比" class="headerlink" title="实验对比"></a>实验对比</h1><table><thead><tr><th style="text-align:center">对比点</th><th style="text-align:center">Hive</th><th style="text-align:center">Hbase</th><th style="text-align:center">分析</th></tr></thead><tbody><tr><td style="text-align:center">对入库数据的要求</td><td style="text-align:center">结构化（无需主键）</td><td style="text-align:center">结构化或非结构化，但是必须存在主键</td><td style="text-align:center">Hive要求数据结构化，可以没有主键。Hbase要求必须存在主键。</td></tr><tr><td style="text-align:center">800w+数据入库</td><td style="text-align:center"><font color="#FF0000">2.219s</font></td><td style="text-align:center">约5min</td><td style="text-align:center">Hive数据入库的过程就是将文件上传至HDFS并建立对应关系的过程，因此很快</td></tr><tr><td style="text-align:center">统计表中记录数</td><td style="text-align:center"><font color="#FF0000">30.56s</font></td><td style="text-align:center">527.46s</td><td style="text-align:center">Hive：将SQL语句翻译成MR过程，扫描所有记录。Hbase：数主键的个数，扫描的k-v对的数目是最多为 列数*记录数</td></tr><tr><td style="text-align:center">根据主键查询</td><td style="text-align:center">0.182s</td><td style="text-align:center"><font color="#FF0000">0.0148s</font></td><td style="text-align:center">Hive：依然是扫描表中记录，线性查找，平均时间复杂度O(n)。Hbase：根据key查找value，时间复杂度O(1)</td></tr><tr><td style="text-align:center">操作的语言</td><td style="text-align:center"><font color="#FF0000">HQL</font></td><td style="text-align:center">新的语言</td><td style="text-align:center">Hive的语言为类似SQL的HQL。Hbase的语言是一种新的语言，学习成本更高。</td></tr><tr><td style="text-align:center">CRUD操作</td><td style="text-align:center">查询</td><td style="text-align:center"><font color="#FF0000">插入和更新</font></td><td style="text-align:center">Hive的数据存在HDFS，因此只能查询而无法修改。Hbase：数据可以查询和更新。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;对比Hive和Hbase。
    
    </summary>
    
      <category term="大数据" scheme="http://www.tensory.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hive" scheme="http://www.tensory.online/tags/Hive/"/>
    
      <category term="Hbase" scheme="http://www.tensory.online/tags/Hbase/"/>
    
      <category term="数据仓库" scheme="http://www.tensory.online/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://www.tensory.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper和Kafka命令</title>
    <link href="http://www.tensory.online/2018/11/29/zookeeper_kafka/"/>
    <id>http://www.tensory.online/2018/11/29/zookeeper_kafka/</id>
    <published>2018-11-29T02:11:07.597Z</published>
    <updated>2018-11-29T02:27:33.433Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>记录命令<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="Zookeeper的启动与关闭"><a href="#Zookeeper的启动与关闭" class="headerlink" title="Zookeeper的启动与关闭"></a>Zookeeper的启动与关闭</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在zookeeper/bin目录下运行</span><br><span class="line">./zkServer.sh start</span><br><span class="line"># jps可以查看到zookeeper对应的QuorumPeerMain进程</span><br><span class="line"></span><br><span class="line"># 查看该节点是leader/follower</span><br><span class="line">./zkServer.sh status</span><br><span class="line"></span><br><span class="line"># 关闭zookeeper</span><br><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><h1 id="Kafka的启动与关闭"><a href="#Kafka的启动与关闭" class="headerlink" title="Kafka的启动与关闭"></a>Kafka的启动与关闭</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在kafka/bin目录下，启动Kafka</span><br><span class="line">./kafka-server-start.sh config/server.properties &amp;</span><br><span class="line"># jps可以查看kafka对应的Kafka进程</span><br><span class="line"></span><br><span class="line"># 关闭Kafka进程</span><br><span class="line">./kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h1 id="一个简单的启动消费者和生产者实例"><a href="#一个简单的启动消费者和生产者实例" class="headerlink" title="一个简单的启动消费者和生产者实例"></a>一个简单的启动消费者和生产者实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 在kafka/bin目录下</span><br><span class="line"># 创建一个topic</span><br><span class="line">./kafka-topics.sh --zookeeper master:2181,slave:2181 --topic test1 --replication-factor 2 --partitions 1 --create</span><br><span class="line"># 查看topic状态</span><br><span class="line">./kafka-topics.sh --zookeeper master:2181,slave:2181 --topic test1 --describe</span><br><span class="line"></span><br><span class="line"># 启动一个producer</span><br><span class="line">./kafka-console-producer.sh --broker-list master:9092,slave:9092 --topic test1</span><br><span class="line"></span><br><span class="line"># 启动一个consumer</span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server master:9092,slave:9092 --from-beginning --topic test1</span><br><span class="line"># 注意：低版本Kafka启动consumer的命令为：kafka-console-consumer.sh --zookeeper master:2181,slave:2181 --from-beginning --topic test1</span><br><span class="line"></span><br><span class="line"># 都启动之后，在producer终端发布消息，在consumer终端可以消费消息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;记录命令
    
    </summary>
    
      <category term="大数据" scheme="http://www.tensory.online/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Zookeeper" scheme="http://www.tensory.online/tags/Zookeeper/"/>
    
      <category term="Kafka" scheme="http://www.tensory.online/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户管理</title>
    <link href="http://www.tensory.online/2018/11/22/linux_user_group/"/>
    <id>http://www.tensory.online/2018/11/22/linux_user_group/</id>
    <published>2018-11-22T01:02:01.731Z</published>
    <updated>2018-11-22T06:44:14.732Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文记录用户管理和组管理的常用命令<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><code>Linux</code>中存在很多组，很多组是在系统安装过程中自动创建的。<br>组与用户可以是多对多关系，即一个组包含多个用户，一个用户可以属于多个组。<br>系统安装过程中，有一个<code>root</code>用户，有一个自建用户(例如我的，<code>tensory</code>)，该用户在创建的时候，会自动添加到多个组。</the></p><p><code>tensory</code>组：与用户名相同的组</p><p><code>sudo组</code>：该组内用户可以执行<code>sudo</code>命令，从而具有<code>root</code>权限</p><p><code>adm</code>组：该组内用户可以具有某些<code>root</code>权限</p><p>其他组，含义暂时未查明。</p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h1 id="添加一个用户"><a href="#添加一个用户" class="headerlink" title="添加一个用户"></a>添加一个用户</h1><p>设置主目录，用户组，远程<code>shell</code>等<br>登录普通用户<br>例如，现在要创建用户名为<code>t1</code>的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -s shell -d /home/t1 -m (-g 组名 -G 附加组名1,附加组名2,附加组名3) t1</span><br></pre></td></tr></table></figure></p><p><code>shell</code>一般选为<code>/bin/bash</code><br>-d 后面的目录表示主目录<br>-m 当设置的主目录事先不存在的时候，该参数可以创建，否则不能创建<br>-g 添加用户的组名，不选时自动新增一个组，与用户名同名<br>-G 附加组名，例如<code>sudo</code>, <code>adm</code>, <code>cdrom</code>等附加组</p><h1 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd t1</span><br></pre></td></tr></table></figure><p>这样就可以通过su 用户名命令登录t1用户了</p><h1 id="赋予用户sudo功能"><a href="#赋予用户sudo功能" class="headerlink" title="赋予用户sudo功能"></a>赋予用户sudo功能</h1><p>方法1：将用户加入sudo组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -G sudo t1</span><br><span class="line">groups t1</span><br></pre></td></tr></table></figure></p><p>可以发现，t1用户现在有两个组：t1组和sudo组。登录用户t1即可使用sudo命令。</p><p>方法2：在<code>/etc/sudoers</code>文件中修改<br>添加一行代码到<code>sudoers</code>文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></p><h1 id="修改用户名和主目录"><a href="#修改用户名和主目录" class="headerlink" title="修改用户名和主目录"></a>修改用户名和主目录</h1><p>例如要将用户名t1改为t2，然后主目录改为<code>/home/t2</code><br>要修改主目录，手下手动创建一个目录<code>/home/t2</code>。<br>修改前，先退出t1用户的所有进程(不停exit)，不然无法修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -d /home/t2 -l t2 t1</span><br></pre></td></tr></table></figure></p><p>这样，就把用户名<code>t1</code>改为<code>t2</code>，主目录改为<code>/home/t2</code></p><h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><p>退出所有<code>t1</code>用户的所有进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r t1</span><br></pre></td></tr></table></figure></p><p>-r表示在删除用户同时，删除主目录和邮件池（报错不影响用户的删除），该参数可以不加，只删除用户。</p><h1 id="重要文件说明"><a href="#重要文件说明" class="headerlink" title="重要文件说明"></a>重要文件说明</h1><ol><li><code>/etc/passwd</code></li></ol><p>所有的用户文件，每行一个用户，6个冒号(:)分割成7个字段，每个字段含义分别为</p><p>用户名:    用户名</p><p>口令:    一般用一个字符代替，但是真实口令存在<code>/etc/shadow</code>中</p><p>用户id:    <code>root</code>用户id为0</p><p>组id：    用户所属的用户组。它对应着<code>/etc/group</code>文件中的一条记录。</p><p>描述：</p><p>主目录：</p><p>登录shell：</p><ol start="2"><li><p><code>/etc/shadow</code>文件<br>用户的真实密码存放处</p></li><li><p><code>/etc/group</code>文件<br>存放组的信息，第一个字段为组名<code>G</code>，最后一个字段为用户名<code>U</code>，多个用户用逗号隔开。<br>注意，仅存储<code>U</code>以<code>G</code>为附加组的信息。类似<code>tensory</code>用户属于<code>tensory</code>组的信息不回存储。</p></li></ol><h1 id="几个命令"><a href="#几个命令" class="headerlink" title="几个命令"></a>几个命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groups 用户名# 查看用户所属组</span><br><span class="line"></span><br><span class="line">groups#查看当前用户所属组</span><br><span class="line"></span><br><span class="line">id t1# 查看用户t1的相关信息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文记录用户管理和组管理的常用命令
    
    </summary>
    
      <category term="Linux" scheme="http://www.tensory.online/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.tensory.online/tags/Linux/"/>
    
      <category term="用户管理" scheme="http://www.tensory.online/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
      <category term="运维" scheme="http://www.tensory.online/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫笔记</title>
    <link href="http://www.tensory.online/2018/11/14/python_spider/"/>
    <id>http://www.tensory.online/2018/11/14/python_spider/</id>
    <published>2018-11-14T12:36:43.946Z</published>
    <updated>2018-11-14T12:55:15.808Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>Python爬虫的一点笔记<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>包括requests和urllib的使用，设置常用的反爬虫机制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Encoding: utf-8</span></span><br><span class="line"><span class="comment"># @Author  : tensory</span></span><br><span class="line"><span class="comment"># @Time    : 2018/11/14 20:40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">'xxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User-Agent</span></span><br><span class="line">ua1 = <span class="string">"User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span></span><br><span class="line">ua2 = <span class="string">"User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span></span><br><span class="line">ua3 = <span class="string">"User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0"</span></span><br><span class="line">ua4 = <span class="string">"User-Agent:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)"</span></span><br><span class="line">ua5 = <span class="string">"User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"</span></span><br><span class="line">ua6 = <span class="string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span></span><br><span class="line">ua_list = [ua1, ua2, ua3, ua4, ua5, ua6]</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP代理池</span></span><br><span class="line">ip_list = [<span class="string">'58.56.149.198:53281'</span>, <span class="string">'123.7.61.8:53281'</span>, <span class="string">'115.46.96.46:8123'</span>, <span class="string">'171.38.24.185:8123'</span>, <span class="string">'171.38.24.185:8123'</span>, </span><br><span class="line">           <span class="string">'111.75.223.9:35918'</span>, <span class="string">'116.192.175.93:41944'</span>, <span class="string">'36.33.32.158:59019'</span>, <span class="string">'1.198.72.4:53128'</span>, <span class="string">'49.71.81.43:3128'</span>, </span><br><span class="line">           <span class="string">'60.216.101.46:59351'</span>, <span class="string">'119.1.97.193:60916'</span>, <span class="string">'182.88.89.7:8123'</span>, <span class="string">'114.99.31.129:34596'</span>, <span class="string">'42.59.86.81:1133'</span>, <span class="string">'182.88.89.189:8123'</span>,</span><br><span class="line">           <span class="string">'121.237.136.34:18118'</span>, <span class="string">'119.254.94.71:42788'</span>, <span class="string">'175.148.71.214:1133'</span>, <span class="string">'175.155.138.60:1133'</span>, <span class="string">'182.88.89.4:8123'</span>, <span class="string">'121.31.192.27:8123'</span>,</span><br><span class="line">           <span class="string">'221.239.86.26:46164'</span>, <span class="string">'220.166.195.160:8118'</span>, <span class="string">'114.225.170.44:53128'</span>, <span class="string">'180.168.13.26:8000'</span>, <span class="string">'182.207.232.135:50465'</span>, </span><br><span class="line">           <span class="string">'121.225.26.169:3128'</span>, <span class="string">'124.232.133.201:30819'</span>, <span class="string">'112.67.128.30:8123'</span>, <span class="string">'210.22.176.146:32153'</span>, <span class="string">'171.38.25.79:8123'</span>, <span class="string">'180.119.65.184:3128'</span>, </span><br><span class="line">           <span class="string">'221.229.18.126:3128'</span>, <span class="string">'106.75.226.36:808'</span>, <span class="string">'115.223.82.100:8010'</span>, <span class="string">'42.51.195.184:808'</span>, <span class="string">'182.88.134.189:8123'</span>, <span class="string">'175.165.129.155:1133'</span>, </span><br><span class="line">           <span class="string">'221.1.200.242:38652'</span>, <span class="string">'222.76.204.110:808'</span>, <span class="string">'116.192.171.51:48565'</span>, <span class="string">'122.241.73.67:808'</span>, <span class="string">'112.98.126.100:41578'</span>, <span class="string">'115.46.65.155:8123'</span>, </span><br><span class="line">           <span class="string">'113.108.242.36:47713'</span>, <span class="string">'113.103.14.36:3128'</span>, <span class="string">'180.119.65.76:3128'</span>, <span class="string">'101.92.105.68:8123'</span>, <span class="string">'221.229.18.170:808'</span>, <span class="string">'171.39.78.245:8123'</span>, </span><br><span class="line">           <span class="string">'61.170.179.89:50799'</span>, <span class="string">'117.114.149.10:43727'</span>, <span class="string">'211.147.239.101:57281'</span>, <span class="string">'219.147.8.148:8000'</span>,</span><br><span class="line">           <span class="string">'115.46.98.154:8123'</span>, <span class="string">'42.59.87.72:1133'</span>, <span class="string">'183.172.208.129:8118'</span>, <span class="string">'218.59.228.18:61976'</span>, <span class="string">'140.207.25.114:41471'</span>]</span><br><span class="line"></span><br><span class="line">url = <span class="string">"xxxxxxxxxxxxxxxxx"</span></span><br><span class="line">ua = ua_list[random.randint(<span class="number">0</span>, len(ua_list) - <span class="number">1</span>)]</span><br><span class="line">ip = <span class="string">"https://"</span>+ip_list[random.randint(<span class="number">0</span>, len(ip_list)<span class="number">-1</span>)]</span><br><span class="line">proxy = &#123;<span class="string">"https"</span>:ip&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置headers，包括UA, Cookie, Connection</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: ua,</span><br><span class="line">    <span class="string">"Cookie"</span>: cookie,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机休眠</span></span><br><span class="line">time.sleep(random.random())</span><br><span class="line"><span class="comment"># 获取HTML(代理在此设置)</span></span><br><span class="line">html = requests.get(url, headers=headers, proxy=proxy).content.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">"td"</span>, class_=<span class="string">"hall-time"</span>):</span><br><span class="line">    res.append(link.contents[<span class="number">1</span>].string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是Ajax异步加载的</span></span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">time.sleep(random.random())</span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line">req.add_header(<span class="string">'X-Requested-With'</span>, <span class="string">'XMLHttpRequest'</span>)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 难以爬取的网站例如动态加载的页面，可以通过PhantomJS+Selenium模拟用户行为，执行下载得到的HTML+JS代码</span></span><br></pre></td></tr></table></figure></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;Python爬虫的一点笔记
    
    </summary>
    
      <category term="Python" scheme="http://www.tensory.online/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.tensory.online/tags/Python/"/>
    
      <category term="爬虫" scheme="http://www.tensory.online/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>将本地项目添加到Git版本管理并关联Github仓库</title>
    <link href="http://www.tensory.online/2018/11/14/git_to_github/"/>
    <id>http://www.tensory.online/2018/11/14/git_to_github/</id>
    <published>2018-11-14T11:41:02.332Z</published>
    <updated>2018-11-14T12:15:15.572Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>介绍Git的用法，以及关联Github仓库<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Git是一个版本管理软件，初始版本由Linus Torvalds编写，其最大的特点之一是[分布式]，不用联网，可以实现本地版本管理。<br>Github是一个代码托管平台，由Preston-Werner创办。<br>Git和Github又一次说明，世界上名字类似两个东西，可能没有任何关系（Java和JavaScript，Angular和Angular2，雷锋和雷峰塔……以及老婆和老婆饼）。</p><h1 id="Git实现版本管理"><a href="#Git实现版本管理" class="headerlink" title="Git实现版本管理"></a>Git实现版本管理</h1><ol><li>Git bash安装过程略</li><li><p>打开Git终端窗口，建立文件夹GitTest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir GitTest</span><br></pre></td></tr></table></figure></li><li><p>进入该文件夹，创建一些文件file1.txt, file2.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd GitTest</span><br><span class="line">vi file1.txt</span><br><span class="line">vi file2.txt</span><br></pre></td></tr></table></figure></li><li><p>通过以下命令，对该文件夹（下的所有文件）进行版本管理初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>add操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li></ol><p>. 表示当前目录下的文件和目录</p><ol start="6"><li><p>查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>提交修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;first commit&apos;</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li></ol><h1 id="将本地项目上传到Github"><a href="#将本地项目上传到Github" class="headerlink" title="将本地项目上传到Github"></a>将本地项目上传到Github</h1><ol><li><p>在Github上创建一个代码仓库，复制仓库地址(<a href="https://github.com/username/projectName.git" target="_blank" rel="noopener">https://github.com/username/projectName.git</a>)</p></li><li><p>将本地项目(上一步创建的Test文件夹)关联到远程仓库<br>进入GitTest文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd GitTest</span><br><span class="line">git remote add origin https://github.com/username/projectName.git</span><br></pre></td></tr></table></figure></li><li><p>项目推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><p>关联后的第一次推送需要加上参数-u，后面不用。</p><ol start="4"><li>去github页面查看项目是否push成功</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/zamamiro/article/details/70172900" target="_blank" rel="noopener">https://blog.csdn.net/zamamiro/article/details/70172900</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000</a></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;介绍Git的用法，以及关联Github仓库
    
    </summary>
    
      <category term="软件工程" scheme="http://www.tensory.online/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="http://www.tensory.online/tags/Git/"/>
    
      <category term="Github" scheme="http://www.tensory.online/tags/Github/"/>
    
      <category term="版本管理" scheme="http://www.tensory.online/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="软件工程" scheme="http://www.tensory.online/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器(初步)</title>
    <link href="http://www.tensory.online/2018/11/03/python-decorator-1/"/>
    <id>http://www.tensory.online/2018/11/03/python-decorator-1/</id>
    <published>2018-11-03T08:14:14.599Z</published>
    <updated>2018-11-03T09:27:34.231Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>简单介绍decorator的概念<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>现在有两个函数，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br></pre></td></tr></table></figure></the></p><p>现在要加一个功能，在调用每个函数的时候，打印’xxx called…’，xxx是函数名。前提是不能修改这两个函数里面的东西。实现方式是定义一个debug()函数，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">debug(say_hello)</span><br><span class="line">debug(say_goodbye)</span><br></pre></td></tr></table></figure></p><p>这样可以实现要求的功能，但是问题很显然，就是现在调用的函数不是say_hello()和say_goodbye()本身了，而是外部嵌套的，这不是我们想要的，我们想要的是，调用的还是这两个函数名。实现如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">say_hello = debug(say_hello)    <span class="comment"># 将say_hello函数名作为参数传给wrapper函数</span></span><br><span class="line">say_hello()                     <span class="comment"># 通过执行say_hello()执行wrapper()</span></span><br><span class="line"></span><br><span class="line">say_goodbye = debug(say_goodbye)</span><br><span class="line">say_goodbye()</span><br></pre></td></tr></table></figure></p><p>这样看起来还不错，但是，<br>say_goodbye = debug(say_goodbye)<br>这个语句看起来依然和很臃肿，我们不希望有这个东西存在，于是就有了装饰器，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line">say_goodbye()</span><br></pre></td></tr></table></figure></p><p>现在，这是一个简单的装饰器。但是在wrapper内部，我们执行func()，这样写没问题，因为在本例中，func为say_hello和say_goodbye，二者没有返回任何东西。但是看下面的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"apple"</span></span><br><span class="line"></span><br><span class="line">res = get_apple()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/decorator1.png" alt="r1"></p><p>因为get_apple()返回了字符串，而在wrapper()内部执行的时候，没有将get_apple()函数执行的结果进行return，所以为None。所以，在写decorator的时候，最好在wrapper内部返回这个函数执行的<br>结果，即使该函数不返回任何东西，也没有影响。代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        <span class="keyword">return</span> func()<span class="comment"># 在这个地方写成return func()而不是func()</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"apple"</span></span><br><span class="line"></span><br><span class="line">res = get_apple()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>正确结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/decorator2.png" alt="r2"></p><p>对带有参数的函数，添加装饰器的方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(sth)</span>:</span>   <span class="comment"># 添加参数</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(sth)</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sth</span><span class="params">(sth)</span>:</span>   <span class="comment"># 添加参数</span></span><br><span class="line">    <span class="keyword">return</span> sth</span><br><span class="line"></span><br><span class="line">print(get_sth(<span class="string">"apple"</span>))</span><br><span class="line">print(get_sth(<span class="string">"banana"</span>))</span><br></pre></td></tr></table></figure></p><p>结果如下图<br><img src="https://raw.githubusercontent.com/poptensory/MarkdownPictures/master/decorator3.png" alt="r3"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;简单介绍decorator的概念
    
    </summary>
    
      <category term="Python" scheme="http://www.tensory.online/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.tensory.online/tags/Python/"/>
    
      <category term="装饰器" scheme="http://www.tensory.online/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="函数式编程" scheme="http://www.tensory.online/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux修改用户名和主机名</title>
    <link href="http://www.tensory.online/2018/10/25/linux_change_username/"/>
    <id>http://www.tensory.online/2018/10/25/linux_change_username/</id>
    <published>2018-10-25T11:31:46.242Z</published>
    <updated>2018-10-25T12:04:02.605Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲如何修改Linxu在用户名和主机名<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="主机名和用户名"><a href="#主机名和用户名" class="headerlink" title="主机名和用户名"></a>主机名和用户名</h1><p>在Linux(Ubuntu)终端可以看到A@B前后一行。@前面的A叫用户名，@后面B的叫主机名。一个主机名可以对应多个用户。</p><h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><p>修改主机名需要修改两个文件的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hostname</span><br></pre></td></tr></table></figure></p><p>这里存的就是主机名。<br>然后，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>修改里面的本机ip地址对应的主机名</p><p>修改完两个文件之后，重启即可发现主机名修改了。</p><h1 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h1><ol><li>Ctrl+D多按几次，退出所有用户的登录(包括root用户和要修改用户名的用户)，不然会提示当前用户被占用</li><li>用root用户登录</li><li>下面代码修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l new_usename old_username</span><br></pre></td></tr></table></figure></li></ol><p>4.Ctrl+D退出root用户登录，然后old_username无法实现登录了，用new_usename可以登录。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>Xshell等远程工具用root登录Ubuntu的时候，好像要配置一些文件。</li><li>修改用户名之后，还没修改用户主目录。</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文讲如何修改Linxu在用户名和主机名
    
    </summary>
    
      <category term="Linux" scheme="http://www.tensory.online/categories/Linux/"/>
    
    
      <category term="用户管理" scheme="http://www.tensory.online/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
      <category term="Ubuntu" scheme="http://www.tensory.online/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>获取带有jQuery的AJAX的函数返回值</title>
    <link href="http://www.tensory.online/2018/10/25/jQuery_func/"/>
    <id>http://www.tensory.online/2018/10/25/jQuery_func/</id>
    <published>2018-10-25T10:32:58.750Z</published>
    <updated>2018-10-25T11:18:58.490Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲述如何正确写带有jQuery AJAX的函数返回值<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><p>无法正确获取返回值的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取本地txt文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#btn").on("click", function () &#123;</span></span><br><span class="line"><span class="undefined">        var data = load_txt();</span></span><br><span class="line"><span class="undefined">        alert(data);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function load_txt()&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "input.txt",</span></span><br><span class="line"><span class="undefined">            method:"GET",</span></span><br><span class="line"><span class="undefined">            dataType:"json",</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                return data;// 这样返回，不对</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/wrong.gif" alt="错误实例" title="错误实例"></p><h1 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h1><p>修改两个地方：1.async:false. 2.用函数内部的变量接收ajax加载的数据后返回.<br>代码就能正确加载正确，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取本地txt文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#btn").on("click", function () &#123;</span></span><br><span class="line"><span class="undefined">        var data = load_txt();</span></span><br><span class="line"><span class="undefined">        alert(data);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function load_txt()&#123;</span></span><br><span class="line"><span class="undefined">        var res = null;  // 定义“全局”变量</span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "input.txt",</span></span><br><span class="line"><span class="undefined">            method:"GET",</span></span><br><span class="line"><span class="undefined">            dataType:"json",</span></span><br><span class="line"><span class="undefined">            async:false,    // 同步加载</span></span><br><span class="line"><span class="undefined">            success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                // //return data;</span></span><br><span class="line"><span class="undefined">                res = data.toString();  // 存储结果</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        return res; // 此时返回</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下图：</p><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/right.gif" alt="正确结果" title="Optional title"></p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>jQuery+ajax加载本地txt，txt内容只能为数字？</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文讲述如何正确写带有jQuery AJAX的函数返回值
    
    </summary>
    
      <category term="Web前端" scheme="http://www.tensory.online/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://www.tensory.online/tags/jQuery/"/>
    
      <category term="异步加载" scheme="http://www.tensory.online/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="AJAX" scheme="http://www.tensory.online/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap模态框</title>
    <link href="http://www.tensory.online/2018/10/15/bootstrap_modal/"/>
    <id>http://www.tensory.online/2018/10/15/bootstrap_modal/</id>
    <published>2018-10-15T12:24:35.940Z</published>
    <updated>2018-10-15T12:29:59.239Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>jQuery+bootstrap翻页<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>模态框及其激活实现如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模态框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--两种方式激活模态框，第二种更加可控--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button class="btn btn-success" data-toggle="modal" data-target="#myModal"&gt;创建模态框data-target&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">id</span>=<span class="string">"create_modal"</span>&gt;</span>创建模态框-点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add_row"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>添加行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover table-condensed table-bordered table-responsive"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"tb1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tommy<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模态框的设定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>模态框（Modal）标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>主体内容填在这里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                学号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"stuno"</span>&gt;</span></span><br><span class="line">                姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"submit_change"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#create_modal").on('click', function () &#123;</span></span><br><span class="line"><span class="undefined">        //$("#myModal").modal('show');</span></span><br><span class="line"><span class="undefined">        $('#myModal').modal(&#123;backdrop: 'static', keyboard: true&#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 提交按钮的点击事件</span></span><br><span class="line"><span class="undefined">    $("#submit_change").click(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var name = $("#name").val();</span></span><br><span class="line"><span class="undefined">        var stuno = $("#stuno").val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        if(name=='' || stuno == '')&#123;</span></span><br><span class="line"><span class="undefined">            alert("姓名或学号不能为空");</span></span><br><span class="line"><span class="undefined">            return;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">        $("tbody#tb1").append('<span class="tag">&lt;<span class="name">tr</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+stuno+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+name+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>');</span></span><br><span class="line"><span class="undefined">        $("#myModal").modal('hide');</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 添加行 按钮的点击事件</span></span><br><span class="line"><span class="undefined">    $("#add_row").click(function () &#123;</span></span><br><span class="line"><span class="undefined">        // backdrop: 空白处不关闭， keyboard: true， ESC键可以关闭模态框</span></span><br><span class="line"><span class="undefined">        $('#myModal').modal(&#123;backdrop: 'static', keyboard: false&#125;);</span></span><br><span class="line"><span class="undefined">        $("#name").val('');</span></span><br><span class="line"><span class="undefined">        $("#stuno").val('');</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    // $("#myModal").on('hide.bs.modal', function () &#123;</span></span><br><span class="line"><span class="undefined">    //     alert("我要消失了哦");</span></span><br><span class="line"><span class="undefined">    // &#125;);</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    // $("#myModal").on('hidden.bs.modal', function () &#123;</span></span><br><span class="line"><span class="undefined">    //     alert("我不见了");</span></span><br><span class="line"><span class="undefined">    // &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></the></p><p>效果如下：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/2018-10-15_20-23-30.gif" alt="模态框" title="Optional title"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;jQuery+bootstrap翻页
    
    </summary>
    
      <category term="Web前端" scheme="http://www.tensory.online/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bootstrap" scheme="http://www.tensory.online/tags/bootstrap/"/>
    
      <category term="模态框" scheme="http://www.tensory.online/tags/%E6%A8%A1%E6%80%81%E6%A1%86/"/>
    
      <category term="JavaScript" scheme="http://www.tensory.online/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery+bootstrap翻页</title>
    <link href="http://www.tensory.online/2018/10/15/jQuery_page/"/>
    <id>http://www.tensory.online/2018/10/15/jQuery_page/</id>
    <published>2018-10-15T06:00:32.730Z</published>
    <updated>2018-10-15T06:26:00.022Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>jQuery+bootstrap翻页<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>翻页功能实现如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"arrow left"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;laquo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"arrow right"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;raquo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击翻页，not过滤掉左右箭头</span></span><br><span class="line"><span class="undefined">        $('li').not(".arrow").click(function () &#123;</span></span><br><span class="line"><span class="undefined">            $(".active").removeClass("active");</span></span><br><span class="line"><span class="undefined">            $(this).addClass("active");</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击左箭头</span></span><br><span class="line"><span class="undefined">        $("li.left").click(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var x = $(".active");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            if(x.prev().attr("class")!='arrow left')&#123;</span></span><br><span class="line"><span class="undefined">                x.removeClass("active");</span></span><br><span class="line"><span class="undefined">                x.prev().addClass("active");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击右箭头</span></span><br><span class="line"><span class="undefined">        $("li.right").click(function () &#123;</span></span><br><span class="line"><span class="undefined">            var x = $(".active");</span></span><br><span class="line"><span class="undefined">            if(x.next().attr("class")!='arrow right')&#123;</span></span><br><span class="line"><span class="undefined">                x.removeClass("active");</span></span><br><span class="line"><span class="undefined">                x.next().addClass("active");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></the></p><p>效果如下：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/2018-10-15_14-19-16.gif" alt="分页" title="Optional title"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;jQuery+bootstrap翻页
    
    </summary>
    
      <category term="Web前端" scheme="http://www.tensory.online/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bootstrap" scheme="http://www.tensory.online/tags/bootstrap/"/>
    
      <category term="jQuery" scheme="http://www.tensory.online/tags/jQuery/"/>
    
      <category term="前端" scheme="http://www.tensory.online/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端调试注意事项</title>
    <link href="http://www.tensory.online/2018/10/10/web_debug/"/>
    <id>http://www.tensory.online/2018/10/10/web_debug/</id>
    <published>2018-10-10T12:35:06.389Z</published>
    <updated>2018-10-10T12:44:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>前端通过ajax测试后台API<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h1><p>设置Chrome浏览器可以跨域，用WebStorm可以存储cookie，只用Chrome无法写入cookie。<br>涉及调用后台API的都要跨域！！！</p><h1 id="用好浏览器的F12"><a href="#用好浏览器的F12" class="headerlink" title="用好浏览器的F12"></a>用好浏览器的F12</h1><p>F12-network会显示http请求的细节，查找访问失败的原因。好好练习抓包分析。query的字段”name=xxx”的等号别漏掉了。</p><h1 id="刷新页面没有？"><a href="#刷新页面没有？" class="headerlink" title="刷新页面没有？"></a>刷新页面没有？</h1><p>多多刷新页面，经常清除Chrome缓存。利用alert等测试页面是否真正刷新。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;前端通过ajax测试后台API
    
    </summary>
    
      <category term="Web前端" scheme="http://www.tensory.online/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.tensory.online/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="API测试" scheme="http://www.tensory.online/tags/API%E6%B5%8B%E8%AF%95/"/>
    
      <category term="ajax" scheme="http://www.tensory.online/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Java读写文本文件</title>
    <link href="http://www.tensory.online/2018/09/29/java_read_write/"/>
    <id>http://www.tensory.online/2018/09/29/java_read_write/</id>
    <published>2018-09-29T12:12:21.273Z</published>
    <updated>2018-09-29T12:58:12.600Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲述Java如何读取文本文件<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>下面实现将一个目录下的多个文本文件，读取，然后写入到一个文本文件中.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> tensory</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018年9月29日 下午8:21:21</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWrite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input目录下有两个文本文件。可以读取目录的所有文件，也可以只读取一个文件</span></span><br><span class="line">String read_path=<span class="string">"E:\\JavaWorkspace\\JavaIOTest\\src\\Input"</span>;</span><br><span class="line"><span class="comment">//文件result不用事先存在</span></span><br><span class="line">  String write_path = <span class="string">"E:\\JavaWorkspace\\JavaIOTest\\src\\Output\\result"</span>; </span><br><span class="line"></span><br><span class="line">File file = <span class="keyword">new</span> File(read_path);<span class="comment">// 此处路径是一个目录</span></span><br><span class="line"><span class="comment">// 如果只读取一个文件，则路径就是文件路径+文件名，后面的FileReader(file)就可以</span></span><br><span class="line">File[] fileList = file.listFiles();<span class="comment">// 读取目录下的所有文件</span></span><br><span class="line"></span><br><span class="line">BufferedReader reader=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">String temp=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileList.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">String file_name = fileList[i].getName();</span><br><span class="line">System.out.println(<span class="string">"fileName:"</span>+file_name);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileList[i]));</span><br><span class="line">writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(write_path, <span class="keyword">true</span>));</span><br><span class="line"><span class="comment">// true表示向文件追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((temp=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">writer.write(temp+<span class="string">"\n"</span>);<span class="comment">//追加写入文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">reader.close();</span><br><span class="line">writer.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot;&gt;&lt;br&gt;本文讲述Java如何读取文本文件
    
    </summary>
    
      <category term="编程语言" scheme="http://www.tensory.online/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://www.tensory.online/tags/Java/"/>
    
      <category term="IO" scheme="http://www.tensory.online/tags/IO/"/>
    
      <category term="文件读写" scheme="http://www.tensory.online/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
</feed>
