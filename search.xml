<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python装饰器(初步)</title>
      <link href="/2018/11/03/python-decorator-1/"/>
      <url>/2018/11/03/python-decorator-1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>简单介绍decorator的概念<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>现在有两个函数，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br></pre></td></tr></table></figure></the></p><p>现在要加一个功能，在调用每个函数的时候，打印’xxx called…’，xxx是函数名。前提是不能修改这两个函数里面的东西。实现方式是定义一个debug()函数，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">debug(say_hello)</span><br><span class="line">debug(say_goodbye)</span><br></pre></td></tr></table></figure></p><p>这样可以实现要求的功能，但是问题很显然，就是现在调用的函数不是say_hello()和say_goodbye()本身了，而是外部嵌套的，这不是我们想要的，我们想要的是，调用的还是这两个函数名。实现如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">say_hello = debug(say_hello)    <span class="comment"># 将say_hello函数名作为参数传给wrapper函数</span></span><br><span class="line">say_hello()                     <span class="comment"># 通过执行say_hello()执行wrapper()</span></span><br><span class="line"></span><br><span class="line">say_goodbye = debug(say_goodbye)</span><br><span class="line">say_goodbye()</span><br></pre></td></tr></table></figure></p><p>这样看起来还不错，但是，<br>say_goodbye = debug(say_goodbye)<br>这个语句看起来依然和很臃肿，我们不希望有这个东西存在，于是就有了装饰器，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye'</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line">say_goodbye()</span><br></pre></td></tr></table></figure></p><p>现在，这是一个简单的装饰器。但是在wrapper内部，我们执行func()，这样写没问题，因为在本例中，func为say_hello和say_goodbye，二者没有返回任何东西。但是看下面的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"apple"</span></span><br><span class="line"></span><br><span class="line">res = get_apple()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/decorator1.png" alt="r1"></p><p>因为get_apple()返回了字符串，而在wrapper()内部执行的时候，没有将get_apple()函数执行的结果进行return，所以为None。所以，在写decorator的时候，最好在wrapper内部返回这个函数执行的<br>结果，即使该函数不返回任何东西，也没有影响。代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        <span class="keyword">return</span> func()<span class="comment"># 在这个地方写成return func()而不是func()</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"apple"</span></span><br><span class="line"></span><br><span class="line">res = get_apple()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>正确结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/decorator2.png" alt="r2"></p><p>对带有参数的函数，添加装饰器的方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(sth)</span>:</span>   <span class="comment"># 添加参数</span></span><br><span class="line">        print(func.__name__ + <span class="string">' called...'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(sth)</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回一个函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sth</span><span class="params">(sth)</span>:</span>   <span class="comment"># 添加参数</span></span><br><span class="line">    <span class="keyword">return</span> sth</span><br><span class="line"></span><br><span class="line">print(get_sth(<span class="string">"apple"</span>))</span><br><span class="line">print(get_sth(<span class="string">"banana"</span>))</span><br></pre></td></tr></table></figure></p><p>结果如下图<br><img src="https://raw.githubusercontent.com/poptensory/MarkdownPictures/master/decorator3.png" alt="r3"></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux修改用户名和主机名</title>
      <link href="/2018/10/25/linux_change_username/"/>
      <url>/2018/10/25/linux_change_username/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲如何修改Linxu在用户名和主机名<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="主机名和用户名"><a href="#主机名和用户名" class="headerlink" title="主机名和用户名"></a>主机名和用户名</h1><p>在Linux(Ubuntu)终端可以看到A@B前后一行。@前面的A叫用户名，@后面B的叫主机名。一个主机名可以对应多个用户。</p><h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><p>修改主机名需要修改两个文件的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hostname</span><br></pre></td></tr></table></figure></p><p>这里存的就是主机名。<br>然后，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>修改里面的本机ip地址对应的主机名</p><p>修改完两个文件之后，重启即可发现主机名修改了。</p><h1 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h1><ol><li>Ctrl+D多按几次，退出所有用户的登录(包括root用户和要修改用户名的用户)，不然会提示当前用户被占用</li><li>用root用户登录</li><li>下面代码修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l new_usename old_username</span><br></pre></td></tr></table></figure></li></ol><p>4.Ctrl+D退出root用户登录，然后old_username无法实现登录了，用new_usename可以登录。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>Xshell等远程工具用root登录Ubuntu的时候，好像要配置一些文件。</li><li>修改用户名之后，还没修改用户主目录。</li></ol></the>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 用户管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取带有jQuery的AJAX的函数返回值</title>
      <link href="/2018/10/25/jQuery_func/"/>
      <url>/2018/10/25/jQuery_func/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲述如何正确写带有jQuery AJAX的函数返回值<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><p>无法正确获取返回值的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取本地txt文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#btn").on("click", function () &#123;</span></span><br><span class="line"><span class="undefined">        var data = load_txt();</span></span><br><span class="line"><span class="undefined">        alert(data);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function load_txt()&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "input.txt",</span></span><br><span class="line"><span class="undefined">            method:"GET",</span></span><br><span class="line"><span class="undefined">            dataType:"json",</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                return data;// 这样返回，不对</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/wrong.gif" alt="错误实例" title="错误实例"></p><h1 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h1><p>修改两个地方：1.async:false. 2.用函数内部的变量接收ajax加载的数据后返回.<br>代码就能正确加载正确，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取本地txt文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#btn").on("click", function () &#123;</span></span><br><span class="line"><span class="undefined">        var data = load_txt();</span></span><br><span class="line"><span class="undefined">        alert(data);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function load_txt()&#123;</span></span><br><span class="line"><span class="undefined">        var res = null;  // 定义“全局”变量</span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "input.txt",</span></span><br><span class="line"><span class="undefined">            method:"GET",</span></span><br><span class="line"><span class="undefined">            dataType:"json",</span></span><br><span class="line"><span class="undefined">            async:false,    // 同步加载</span></span><br><span class="line"><span class="undefined">            success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                // //return data;</span></span><br><span class="line"><span class="undefined">                res = data.toString();  // 存储结果</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        return res; // 此时返回</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下图：</p><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/right.gif" alt="正确结果" title="Optional title"></p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>jQuery+ajax加载本地txt，txt内容只能为数字？</p></the>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 异步加载 </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bootstrap模态框</title>
      <link href="/2018/10/15/bootstrap_modal/"/>
      <url>/2018/10/15/bootstrap_modal/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>jQuery+bootstrap翻页<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>模态框及其激活实现如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模态框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--两种方式激活模态框，第二种更加可控--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button class="btn btn-success" data-toggle="modal" data-target="#myModal"&gt;创建模态框data-target&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">id</span>=<span class="string">"create_modal"</span>&gt;</span>创建模态框-点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add_row"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>添加行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover table-condensed table-bordered table-responsive"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"tb1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tommy<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模态框的设定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>模态框（Modal）标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>主体内容填在这里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                学号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"stuno"</span>&gt;</span></span><br><span class="line">                姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"submit_change"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $("#create_modal").on('click', function () &#123;</span></span><br><span class="line"><span class="undefined">        //$("#myModal").modal('show');</span></span><br><span class="line"><span class="undefined">        $('#myModal').modal(&#123;backdrop: 'static', keyboard: true&#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 提交按钮的点击事件</span></span><br><span class="line"><span class="undefined">    $("#submit_change").click(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var name = $("#name").val();</span></span><br><span class="line"><span class="undefined">        var stuno = $("#stuno").val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        if(name=='' || stuno == '')&#123;</span></span><br><span class="line"><span class="undefined">            alert("姓名或学号不能为空");</span></span><br><span class="line"><span class="undefined">            return;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">        $("tbody#tb1").append('<span class="tag">&lt;<span class="name">tr</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+stuno+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;<span class="name">td</span>&gt;</span>'+name+'<span class="tag">&lt;/<span class="name">td</span>&gt;</span>\n' +</span></span><br><span class="line"><span class="xml">            '<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>');</span></span><br><span class="line"><span class="undefined">        $("#myModal").modal('hide');</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 添加行 按钮的点击事件</span></span><br><span class="line"><span class="undefined">    $("#add_row").click(function () &#123;</span></span><br><span class="line"><span class="undefined">        // backdrop: 空白处不关闭， keyboard: true， ESC键可以关闭模态框</span></span><br><span class="line"><span class="undefined">        $('#myModal').modal(&#123;backdrop: 'static', keyboard: false&#125;);</span></span><br><span class="line"><span class="undefined">        $("#name").val('');</span></span><br><span class="line"><span class="undefined">        $("#stuno").val('');</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    // $("#myModal").on('hide.bs.modal', function () &#123;</span></span><br><span class="line"><span class="undefined">    //     alert("我要消失了哦");</span></span><br><span class="line"><span class="undefined">    // &#125;);</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    // $("#myModal").on('hidden.bs.modal', function () &#123;</span></span><br><span class="line"><span class="undefined">    //     alert("我不见了");</span></span><br><span class="line"><span class="undefined">    // &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></the></p><p>效果如下：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/2018-10-15_20-23-30.gif" alt="模态框" title="Optional title"></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> 模态框 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery+bootstrap翻页</title>
      <link href="/2018/10/15/jQuery_page/"/>
      <url>/2018/10/15/jQuery_page/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>jQuery+bootstrap翻页<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>翻页功能实现如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"arrow left"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;laquo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"arrow right"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;raquo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击翻页，not过滤掉左右箭头</span></span><br><span class="line"><span class="undefined">        $('li').not(".arrow").click(function () &#123;</span></span><br><span class="line"><span class="undefined">            $(".active").removeClass("active");</span></span><br><span class="line"><span class="undefined">            $(this).addClass("active");</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击左箭头</span></span><br><span class="line"><span class="undefined">        $("li.left").click(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var x = $(".active");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            if(x.prev().attr("class")!='arrow left')&#123;</span></span><br><span class="line"><span class="undefined">                x.removeClass("active");</span></span><br><span class="line"><span class="undefined">                x.prev().addClass("active");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击右箭头</span></span><br><span class="line"><span class="undefined">        $("li.right").click(function () &#123;</span></span><br><span class="line"><span class="undefined">            var x = $(".active");</span></span><br><span class="line"><span class="undefined">            if(x.next().attr("class")!='arrow right')&#123;</span></span><br><span class="line"><span class="undefined">                x.removeClass("active");</span></span><br><span class="line"><span class="undefined">                x.next().addClass("active");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></the></p><p>效果如下：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/2018-10-15_14-19-16.gif" alt="分页" title="Optional title"></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> jQuery </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端调试注意事项</title>
      <link href="/2018/10/10/web_debug/"/>
      <url>/2018/10/10/web_debug/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>前端通过ajax测试后台API<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h1><p>设置Chrome浏览器可以跨域，用WebStorm可以存储cookie，只用Chrome无法写入cookie。<br>涉及调用后台API的都要跨域！！！</p><h1 id="用好浏览器的F12"><a href="#用好浏览器的F12" class="headerlink" title="用好浏览器的F12"></a>用好浏览器的F12</h1><p>F12-network会显示http请求的细节，查找访问失败的原因。好好练习抓包分析。query的字段”name=xxx”的等号别漏掉了。</p><h1 id="刷新页面没有？"><a href="#刷新页面没有？" class="headerlink" title="刷新页面没有？"></a>刷新页面没有？</h1><p>多多刷新页面，经常清除Chrome缓存。利用alert等测试页面是否真正刷新。</p></the>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> API测试 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java读写文本文件</title>
      <link href="/2018/09/29/java_read_write/"/>
      <url>/2018/09/29/java_read_write/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲述Java如何读取文本文件<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>下面实现将一个目录下的多个文本文件，读取，然后写入到一个文本文件中.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> tensory</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018年9月29日 下午8:21:21</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWrite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input目录下有两个文本文件。可以读取目录的所有文件，也可以只读取一个文件</span></span><br><span class="line">String read_path=<span class="string">"E:\\JavaWorkspace\\JavaIOTest\\src\\Input"</span>;</span><br><span class="line"><span class="comment">//文件result不用事先存在</span></span><br><span class="line">  String write_path = <span class="string">"E:\\JavaWorkspace\\JavaIOTest\\src\\Output\\result"</span>; </span><br><span class="line"></span><br><span class="line">File file = <span class="keyword">new</span> File(read_path);<span class="comment">// 此处路径是一个目录</span></span><br><span class="line"><span class="comment">// 如果只读取一个文件，则路径就是文件路径+文件名，后面的FileReader(file)就可以</span></span><br><span class="line">File[] fileList = file.listFiles();<span class="comment">// 读取目录下的所有文件</span></span><br><span class="line"></span><br><span class="line">BufferedReader reader=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">String temp=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileList.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">String file_name = fileList[i].getName();</span><br><span class="line">System.out.println(<span class="string">"fileName:"</span>+file_name);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileList[i]));</span><br><span class="line">writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(write_path, <span class="keyword">true</span>));</span><br><span class="line"><span class="comment">// true表示向文件追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((temp=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">writer.write(temp+<span class="string">"\n"</span>);<span class="comment">//追加写入文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">reader.close();</span><br><span class="line">writer.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
            <tag> 文件读写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hive搭建(集成mysql)</title>
      <link href="/2018/09/20/build_hive/"/>
      <url>/2018/09/20/build_hive/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文详细讲述Hive的搭建过程。<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>Hive是一种数据仓库，建立在HDFS之上，因此，搭建Hive之前需要成功搭建Hadoop平台。</the></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><strong>1.搭好Hadoop平台。</strong><br><strong>2.准备好Hive安装包和mysql驱动</strong><br>Hive安装包可以到官网下载，mysql驱动官网貌似找不到*.jar包，可以<a href="https://github.com/poptensory/OnlineResource/blob/master/mysql-connector-java-5.1.41-bin.jar?raw=true" target="_blank" rel="noopener">点我下载mysql驱动</a>。<br><strong>3.注意:如果是集群Hive只需要安装在一个节点上</strong></p><h1 id="Hive的配置"><a href="#Hive的配置" class="headerlink" title="Hive的配置"></a>Hive的配置</h1><p><strong>1.解压Hive安装包</strong><br>将Hive安装包和mysql驱动放在用户主目录（或其他目录，本文以用户主目录为例）。</p><p>通过如下命令解压Hive安装包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-hive-2.3.3-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/1.png" alt="tar hive"></p><p>解压后会出现apache-hive-2.3.3-bin文件，此处更名为更简单的名字，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-hive-2.3.3-bin hive-2.3.3</span><br></pre></td></tr></table></figure></p><p>现在hive-2.3.3这个目录就是Hive主目录。</p><p><strong>2.配置Hive环境变量</strong><br>打开环境变量配置文件，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件末尾添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># hive home dir</span><br><span class="line">export HIVE_HOME=/home/tensory/hive-2.3.3</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><p>添加完毕之后，保存，输入如下命令激活环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>激活之后，输入如下命令检测环境变量是否配置好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive –version</span><br></pre></td></tr></table></figure></p><p>顺利的话，会看到类似下图的Hive版本等信息。<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/4.png" alt="hive version"></p><p><strong>3.修改Hive配置文件hive-site.xml</strong><br>进入Hive主目录，进入其下的conf目录。输入如下命令，从模板复制一份配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure></p><p>修改hive-site.xml，先删除<configuration>标签里面的所有内容（为什么是所有？）<br>放入下面这些代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>tensory<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://192.168.174.135:3306/hive?useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></configuration></p><p>修改后的hive-site.xml文件就像这样子：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/7.png" alt="hive-site"></p><p>上图的”tensory”和”123456”为稍后mysql连接hive的账密，IP地址改为hive所在节点的IP地址。其他不用修改，影响不大。保存。</p><p><strong>4.修改Hive配置文件hive-env.sh</strong><br>先从模板复制一份，然后再修改，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure></p><p>通过vi打开hive-env.sh，在里面添加HADOOP的主路径，类似下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HADOOP_HOME=/home/tensory/hadoop-2.6.5/</span><br></pre></td></tr></table></figure></p><p>保存。</p><h1 id="mysql的安装与集成"><a href="#mysql的安装与集成" class="headerlink" title="mysql的安装与集成"></a>mysql的安装与集成</h1><p><strong>1.安装mysql相关服务</strong><br>输入mysql安装命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/10.png" alt="mysql install"></p><p>稍等会询问，输入y。<br>输入y，等待一段时间后，会提示输入MySQL的root用户的密码。这个密码，稍后用于mysql的登录。设置即可。</p><p>安装完毕之后，默认mysql是启动的。</p><p><strong>2.用root用户登录mysql</strong><br>输入登录命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>会提示输入密码，就是刚刚设置的密码。然后，就进入了mysql的命令模式，如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/12.png" alt="mysql&gt;"></p><p><strong>3.创建一个hive数据库</strong><br>在mysql的命令模式下，创建hive数据库，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database hive;</span><br></pre></td></tr></table></figure></p><p>然后，再通过如下三行命令，集成mysql到hive：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER  &apos;tensory&apos;@&apos;%&apos;  IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON  *.* TO &apos;tensory&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/13.png" alt="create hive"></p><p>其中’tensory’和’123456’为在hive-site.xml中设置的账密，用于hive连接mysql。</p><p>通过exit;命令退出mysql交互式模式。</p><p><strong>4.修改mysql的配置文件</strong><br>进入/etc/mysql/mysql.conf.d/mysqld.cnf里面，代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>找到bind-address这一行，注释掉就可以，如下图，注释掉：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/14.png" alt="bind address"></p><p><strong>5.拷贝mysql驱动程序</strong><br>进入主目录，将mysql驱动程序拷贝到hive-2.3.3/lib/目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.41-bin.jar hive-2.3.3/lib/</span><br></pre></td></tr></table></figure></p><h1 id="初始化元数据"><a href="#初始化元数据" class="headerlink" title="初始化元数据"></a>初始化元数据</h1><p><strong>1.启动Hadoop</strong><br>在任何一个目录输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure></p><p>可以通过jps命令测试是否启动hadoop。</p><p><strong>2.初始化</strong><br>初始化命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure></p><p>可能遇到下面这个问题：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/15.png" alt="cannot connect"></p><p>重启msyql服务即可，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>重启之后，再输入初始化命令，顺利的话，可以看到类似如下图的成功信息：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/16.png" alt="success"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>1.简单测试</strong><br>  s1:输入hive，进入hive交互模式。<br>  s2:查看有哪些数据库:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></p><p>  s3:创建一个数据库：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database dbTest;</span><br></pre></td></tr></table></figure></p><p>  s4:再查看数据库：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></p><p>  类似下图：<br>  <img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/17.png" alt="test"></p><p><strong>2.建表</strong></p><p>依然在hive交互模式下，通过如下命令进入dbTest数据库下，开始建表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use dbTest</span><br></pre></td></tr></table></figure></p><p>建立一个名为tbTest的表，建表命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table tbTest (id string, name string, age string);</span><br></pre></td></tr></table></figure></p><p><strong>3.创建数据</strong><br>（退出hive交互模式）创建一个文本文件，tbtest.txt，写入如下内容(或者其他内容)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">111,Mike,21</span><br><span class="line">222,Bob,20</span><br><span class="line">333,Cindy,22</span><br></pre></td></tr></table></figure></p><p><strong>4.导入数据</strong><br>（进入hive交互模式）向表tbTest中导入上面的数据，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath &apos;/home/tensory/tbtest.txt&apos; into table tbtest;</span><br></pre></td></tr></table></figure></p><p>注意选择创建的tbtest.txt的路径。</p><p><strong>5.查看数据</strong><br>查看表中的所有数据，命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tbtest;</span><br></pre></td></tr></table></figure></p><p>结果如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/19.png" alt="select result"></p><p>发现后面两列为NULL，因为hive建表的时候默认的分隔符不是文本文件中的分隔符：逗号，输入如下命令修改分隔符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbtest set SERDEPROPERTIES(&apos;field.delim&apos;=&apos;,&apos;);</span><br></pre></td></tr></table></figure></p><p>再次查看，正常，如下图：<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/20.png" alt="select result"></p><p><strong>6.查看HDFS</strong><br>进入hdfs的web界面，查看文件系统，可以看到对应的表，和对应的数据文件，如下图:<br><img src="https://raw.githubusercontent.com/poptensory/OnlineResource/master/21.png" alt="hdfs"></p><p>把这个文件下载下来，查看，会发现和导入的那个文件内容完全相同。</p><h1 id="简单的对比"><a href="#简单的对比" class="headerlink" title="简单的对比"></a>简单的对比</h1><p>为了对比性能，我写了一个Java封装SQL向MySQL写入数据的Demo。Java+SQL+MySQL写入30000条记录用时20分钟左右，<br>Hive导入8000000（800w）条相同格式的记录，用时14秒左右。写入数据库的效率相差几个数量级，而且Hive导入数据的代码只有一句，<br>Java需要读取*.txt、分割字符串、向表写入记录，代码繁琐。</p><p>至此，Hive配置、mysql集成、Hive测试完成。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/kinginme/p/7233315.html" target="_blank" rel="noopener">Hive安装与配置</a><br><a href="http://www.cnblogs.com/kinginme/p/7249533.html" target="_blank" rel="noopener">Hive集成mysql数据库</a><br><a href="https://www.cnblogs.com/dxxblog/p/8193967.html" target="_blank" rel="noopener">Hive安装与配置详解</a></p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置多台虚拟机之间的免密通信</title>
      <link href="/2018/09/14/ssh_rsa/"/>
      <url>/2018/09/14/ssh_rsa/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>本文讲解多台虚拟机之间的免密登录和免密文件传输<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>在搭建Spark+Hadoop平台的时候，通常需要将文件从一个节点批量传递给其他节点，传递的方式是通过scp命令，但是每一次scp都需要对方口令，<br>才可以传输。为了方便文件传输，需要配置免密登录，这样在使用scp命令传输的时候，可以省去输入密码的繁琐过程。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>假设有主机名为A、B和C三台虚拟机，IP地址分别为IPA、IPB和IPC。首先每台虚拟机都可以生成属于自己的秘钥（类似于每台虚拟机的口令），<br>假设生成的秘钥分别为pwdA、pwdB和pwdC，那么只要这些虚拟机相互交换这些秘钥，之后就可以了互相免密通信了。具体的做法是，举个例子，<br>A将pwdA放到一个文件X中，B和C将各自的秘钥也放到位于A的X中（这个过程中，B和C需要知道A的口令），现在A的X中含有A、B和C三台虚拟机<br>秘钥，然后由A将文件X分发给B和C，如此，A、B和C均具有另外二者的秘钥了，于是就可以进行免密登录和免密文件传输。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>关闭防火墙</li></ul><p>在每台虚拟机的终端执行关闭防火墙的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure></p><ul><li>配置IP地址到代号的映射</li></ul><p>用IP地址标记某台主机不方便，因此可以为将主机IP地址映射为一个代号，方便命令的输入。例如A、B和C的代号可以分别是master、slave1和<br>slave2(此处master slave没有特别意义)。在每台虚拟机终端修改/etc/hosts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>在文件末尾追加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IPAmaster</span><br><span class="line">IPBslave1</span><br><span class="line">IPCslave2</span><br></pre></td></tr></table></figure></p><p>输入完毕，保存。注意，此步骤不是必要的，只是为了稍后秘钥传输和之后文件传输的便捷。</p><h1 id="生成rsa秘钥"><a href="#生成rsa秘钥" class="headerlink" title="生成rsa秘钥"></a>生成rsa秘钥</h1><p>在每台虚拟机终端，生成各自的rsa秘钥。</p><p>在任意一个目录新建.ssh目录，我们以在~目录下建立这个目录（这个目录以.开头，ls看不到，ls -a 命令可以看到）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure></p><p>进入该目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br></pre></td></tr></table></figure></p><p>生成rsa秘钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>(此处会询问是否设置密码，连续输入三个回车即可，即默认无密码ssh。如果是大型项目，需要设置密码)<br>然后会发现，在.ssh目录下，多了两个文件，分别名为  id_rsa和id_rsa.pub，分别为私钥和公钥，虚拟机之间需要交换的公钥。</p><h1 id="收集秘钥"><a href="#收集秘钥" class="headerlink" title="收集秘钥"></a>收集秘钥</h1><p>现在，每台虚拟机都有了各自的秘钥，现在指定某台虚拟机，将公钥收集在一起。此处指定master，即虚拟机A。<br>在A的终端的.ssh目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></p><p>即将A的公钥放到authorized_keys文件中。</p><p>在B的终端的.ssh目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp id_rsa.pub | ssh 主机名@master &apos;cat &gt;&gt; ~/.ssh/authorized_keys&apos;</span><br></pre></td></tr></table></figure></p><p>（此处要输入A的口令）<br>即将B的公钥放到A的authorized_keys中</p><p>在C的终端的.ssh目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp id_rsa.pub | ssh 主机名@master &apos;cat &gt;&gt; ~/.ssh/authorized_keys&apos;</span><br></pre></td></tr></table></figure></p><p>（此处要输入A的口令）<br>即将C的公钥放到A的authorized_keys中</p><h1 id="分发秘钥"><a href="#分发秘钥" class="headerlink" title="分发秘钥"></a>分发秘钥</h1><p>现在A的authorized_keys中有了A、B和C的秘钥了，只需要将这个文件分发给B和C即可。<br>在A的终端分别执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp authorized_keys | ssh B@slave1:~/.ssh/</span><br></pre></td></tr></table></figure><p>（此处要输入B的口令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp authorized_keys | ssh C@slave2:~/.ssh/</span><br></pre></td></tr></table></figure><p>（此处要输入C的口令）</p><h1 id="完成配置"><a href="#完成配置" class="headerlink" title="完成配置"></a>完成配置</h1><p>现在A、B和C分别具有另外两者的秘钥了，可以使用 ssh 命令免密登录或scp免密传输文件，命令如下：</p><ul><li>在A的终端登录到B主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh slave1</span><br></pre></td></tr></table></figure></li></ul><p>（不用口令就可以登录到B的终端）</p><ul><li>在C的终端传文件给A主机：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp file_dir/file_name | ssh A@master:/some_dir/</span><br></pre></td></tr></table></figure></li></ul><p>（不用口令）</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>使用scp命令的时候，区分主机名和IP地址的代号。</li><li>这里master和slave没有实际意义，任意一台虚拟机都可完成收集/分发秘钥工作。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/diyxiaoshitou/article/details/52471097" target="_blank" rel="noopener">虚拟机中多个Linux系统之间配置免秘钥登录</a></li><li><a href="https://blog.csdn.net/diyxiaoshitou/article/details/52471097" target="_blank" rel="noopener">id_rsa id_pub 公钥与私钥</a></li></ul></the>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> SSH </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小小总结-新的征程</title>
      <link href="/2018/09/09/first_blog/"/>
      <url>/2018/09/09/first_blog/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |=""><br>毕业了才知道，上大学真舒服。<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>这个博客反反复复搭了3次，这次终于找到自己想要的主题，虽然存在一些问题和可以优化的细节，大部分功能已经配置齐全。第一篇正式的博客，总结一下近况。</p><p>2018.3-2018.9这半年，知识增长的不多不少，体重依然稳定。总结了一些学习和生活的小感悟。</p><h1 id="编程的好习惯"><a href="#编程的好习惯" class="headerlink" title="编程的好习惯"></a>编程的好习惯</h1><p>1.代码量较大的时候，做好单个函数/模块的测试，测试的数据应该多样化、复杂化，确保涵盖真实输入的所有可能。</p><p>2.涉及大量代码、大量输入文件、结果文件时，写好文档，说明各个脚本、文本文件等的意义。</p><h1 id="学习与选择"><a href="#学习与选择" class="headerlink" title="学习与选择"></a>学习与选择</h1><p>1.发挥自己的优势。明确自己的优势，是算法、数学、工程能力还是系统能力，也许样样干的都不错，但是一个人的时间和精力有限，学习所有的东西几乎不可能，所以务必选择自己擅长的领域/方向/方法，充分发挥自己的优势，规避自己不熟悉且学习成本高的那一块。</p><p>2.在面临大大小小的选择的时候，不必马上做出选择，先冷静下来，避免“选择-做一段时间-放弃”这种情况，这样既浪费时间，又让自己养成了半途而废的畏惧心理。</p><h1 id="好好生活"><a href="#好好生活" class="headerlink" title="好好生活"></a>好好生活</h1><p>保持热情，让自己舒服。庆幸自己做的工作不辣么讨厌，但是遇到正向反馈周期长的时候，总会失去兴趣。这个时候，可以写个博客，把自己学到的show出来，酷酷的，让自己成就感满满。新的篇章早已打开，努力不努力的鸡汤，说起来没有意义，总之，扎实做事，让自己活的舒服一点。还有…多听相声。</p></the>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 舒服 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
